
function_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000330c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08003498  08003498  00013498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036b0  080036b0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080036b0  080036b0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036b0  080036b0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036b0  080036b0  000136b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036b4  080036b4  000136b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080036b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000908  20000018  080036d0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000920  080036d0  00020920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004bc8  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001159  00000000  00000000  00024c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005b0  00000000  00000000  00025d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000508  00000000  00000000  00026320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025715  00000000  00000000  00026828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000062f8  00000000  00000000  0004bf3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e32ee  00000000  00000000  00052235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135523  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001870  00000000  00000000  00135574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800347c 	.word	0x0800347c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	0800347c 	.word	0x0800347c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <DAC_init>:
#include "stm32l4xx_hal.h"
#include <stdint.h>

// Function to write initialize the PA4, PA5, and PA7 Pins in SPI Mode
void DAC_init(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
	// GPIO Configuration of PA4 - PA7 to Alternate Function for SPI
	GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE7);
 8000b08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b12:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8000b16:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE7_1);
 8000b18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b22:	f443 4309 	orr.w	r3, r3, #35072	; 0x8900
 8000b26:	6013      	str	r3, [r2, #0]

	// User manual requires all alternate functions to be set to 5 for SPI Usage
	GPIOA->AFR[0] |= ((SPI_AF5 << GPIO_AFRL_AFSEL5_Pos)| (SPI_AF5 << GPIO_AFRL_AFSEL7_Pos));
 8000b28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b2c:	6a1b      	ldr	r3, [r3, #32]
 8000b2e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b32:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000b36:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000b3a:	6213      	str	r3, [r2, #32]

	// Configure SPI1 CR to set MSTR, Baudrate: fCLK/2, SPI Enable, SSI, and SSM
	SPI1->CR1 |= SPI_CR1_MSTR | SPI_CR1_SSI | SPI_CR1_SSM;
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <DAC_init+0x68>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <DAC_init+0x68>)
 8000b42:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8000b46:	6013      	str	r3, [r2, #0]

	//Configure SPI CR2 to set NSSP, TXEIE, DS = 1111
	SPI1->CR2 |= (SPI_CR2_DS_3| SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0);
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <DAC_init+0x68>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <DAC_init+0x68>)
 8000b4e:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000b52:	6053      	str	r3, [r2, #4]

	SPI1->CR1 |= SPI_CR1_SPE;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <DAC_init+0x68>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <DAC_init+0x68>)
 8000b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b5e:	6013      	str	r3, [r2, #0]
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40013000 	.word	0x40013000

08000b70 <DAC_write>:

// Function to write a 12-bit value to the DAC
void DAC_write(uint16_t packet)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
	//SPI1->CR1 &= ~SPI_CR1_SSI;   				 // turn off CS when writing
	GPIOA->ODR &= ~GPIO_ODR_OD4;
 8000b7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b84:	f023 0310 	bic.w	r3, r3, #16
 8000b88:	6153      	str	r3, [r2, #20]

	while (!(SPI1->SR & SPI_SR_TXE));  	 // wait until transmit buffer is empty
 8000b8a:	bf00      	nop
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <DAC_write+0x60>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d0f9      	beq.n	8000b8c <DAC_write+0x1c>

//	SPI1->DR = (packet & ~(DAC_CONFIG_MASK)) | (DAC_CONFIG_MOD1 << 12);
	SPI1->DR = packet | (DAC_CONFIG_MOD1 << 12);
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <DAC_write+0x60>)
 8000ba2:	60da      	str	r2, [r3, #12]

	while ((SPI1->SR & SPI_SR_BSY));  	 // wait until transmit buffer is empty
 8000ba4:	bf00      	nop
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <DAC_write+0x60>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f9      	bne.n	8000ba6 <DAC_write+0x36>

	// set the configurations bits and send packet
	GPIOA->ODR |= GPIO_ODR_OD4;
 8000bb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bbc:	f043 0310 	orr.w	r3, r3, #16
 8000bc0:	6153      	str	r3, [r2, #20]
	//SPI1->CR1 |= SPI_CR1_SSI;      				 // turn on CS when done
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40013000 	.word	0x40013000

08000bd4 <keypad_init>:
#include <stdlib.h>



void keypad_init()
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

	// columns Set Up
	// clear GPIOC PB10-PB13
	GPIOC->MODER		&=	~(GPIO_MODER_MODE10
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <keypad_init+0x84>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a1e      	ldr	r2, [pc, #120]	; (8000c58 <keypad_init+0x84>)
 8000bde:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 8000be2:	6013      	str	r3, [r2, #0]
		  	  	  	  	  	  | GPIO_MODER_MODE11
							  | GPIO_MODER_MODE12
							  | GPIO_MODER_MODE13);

	// set MODE = 01 (output)
	GPIOC->MODER		|=	( (1 << GPIO_MODER_MODE10_Pos)
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <keypad_init+0x84>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <keypad_init+0x84>)
 8000bea:	f043 63aa 	orr.w	r3, r3, #89128960	; 0x5500000
 8000bee:	6013      	str	r3, [r2, #0]
		  	  	  	  	  	  | (1 << GPIO_MODER_MODE11_Pos)
							  | (1 << GPIO_MODER_MODE12_Pos)
							  | (1 << GPIO_MODER_MODE13_Pos));

	// set to push-pull output
	GPIOC->OTYPER		&=	~(GPIO_OTYPER_OT10
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <keypad_init+0x84>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	4a18      	ldr	r2, [pc, #96]	; (8000c58 <keypad_init+0x84>)
 8000bf6:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000bfa:	6053      	str	r3, [r2, #4]
		  	  	  	  	  	  | GPIO_OTYPER_OT11
							  | GPIO_OTYPER_OT12
							  | GPIO_OTYPER_OT13);

	// no pull-up or pull-down resistors
	GPIOC->PUPDR		&=	~(GPIO_PUPDR_PUPD10
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <keypad_init+0x84>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <keypad_init+0x84>)
 8000c02:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 8000c06:	60d3      	str	r3, [r2, #12]
		  	  	  	  	  	  | GPIO_PUPDR_PUPD11
							  | GPIO_PUPDR_PUPD12
							  | GPIO_PUPDR_PUPD13);

	// low speed
	GPIOC->OSPEEDR		&=	~(GPIO_OSPEEDR_OSPEED10
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <keypad_init+0x84>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <keypad_init+0x84>)
 8000c0e:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 8000c12:	6093      	str	r3, [r2, #8]
		  	  	  	  	  	  | GPIO_OSPEEDR_OSPEED11
							  | GPIO_OSPEEDR_OSPEED12
							  | GPIO_OSPEEDR_OSPEED13);

	// set GPIOAumns to high
	GPIOC->ODR	|= (GPIO_ODR_OD10 | GPIO_ODR_OD11 | GPIO_ODR_OD12| GPIO_ODR_OD13);
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <keypad_init+0x84>)
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <keypad_init+0x84>)
 8000c1a:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8000c1e:	6153      	str	r3, [r2, #20]

	// Rows Set Up
	// clear GPIOC PB0-PB3 and set to input
	GPIOC->MODER		&=	~(GPIO_MODER_MODE0
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <keypad_init+0x84>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <keypad_init+0x84>)
 8000c26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c2a:	6013      	str	r3, [r2, #0]
		  	  	  	  	  	  | GPIO_MODER_MODE1
							  | GPIO_MODER_MODE2
							  | GPIO_MODER_MODE3);
	// set MODE = 01 (output)
	GPIOC->MODER		|=	( (0 << GPIO_MODER_MODE0_Pos)
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <keypad_init+0x84>)
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <keypad_init+0x84>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6013      	str	r3, [r2, #0]
							  | (0 << GPIO_MODER_MODE1_Pos)
							  | (0 << GPIO_MODER_MODE2_Pos)
							  | (0 << GPIO_MODER_MODE3_Pos));
	// clear pupdr
	GPIOC->PUPDR		&=	~(GPIO_PUPDR_PUPD0_1
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <keypad_init+0x84>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <keypad_init+0x84>)
 8000c3a:	f023 03aa 	bic.w	r3, r3, #170	; 0xaa
 8000c3e:	60d3      	str	r3, [r2, #12]
		  	  	  	  	  	  | GPIO_PUPDR_PUPD1_1
							  | GPIO_PUPDR_PUPD2_1
							  | GPIO_PUPDR_PUPD3_1);
	// set pupdr to pull-down
	GPIOC->PUPDR		|=	(2 << GPIO_PUPDR_PUPD0_Pos
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <keypad_init+0x84>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <keypad_init+0x84>)
 8000c46:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 8000c4a:	60d3      	str	r3, [r2, #12]
		  	  	  	  	  	  | 2 << GPIO_PUPDR_PUPD1_Pos
							  | 2 << GPIO_PUPDR_PUPD2_Pos
							  | 2 << GPIO_PUPDR_PUPD3_Pos);
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	48000800 	.word	0x48000800

08000c5c <keypad_read>:

uint16_t keypad_read(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
	uint8_t rows;
//	uint8_t cols;
	uint16_t bits;
	COL_PORT |= COL_MASK;
 8000c62:	4b5d      	ldr	r3, [pc, #372]	; (8000dd8 <keypad_read+0x17c>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	4a5c      	ldr	r2, [pc, #368]	; (8000dd8 <keypad_read+0x17c>)
 8000c68:	f443 5370 	orr.w	r3, r3, #15360	; 0x3c00
 8000c6c:	6153      	str	r3, [r2, #20]

	uint8_t row_debug = ROW_PORT;
 8000c6e:	4b5a      	ldr	r3, [pc, #360]	; (8000dd8 <keypad_read+0x17c>)
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	71fb      	strb	r3, [r7, #7]

 	rows = ROW_PORT & (ROW_MASK);
 8000c74:	4b58      	ldr	r3, [pc, #352]	; (8000dd8 <keypad_read+0x17c>)
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	75fb      	strb	r3, [r7, #23]

	if(rows != 0){
 8000c80:	7dfb      	ldrb	r3, [r7, #23]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f000 80a0 	beq.w	8000dc8 <keypad_read+0x16c>
		bits = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	80bb      	strh	r3, [r7, #4]
		// set output
		COL_PORT &= ~COL_MASK;
 8000c8c:	4b52      	ldr	r3, [pc, #328]	; (8000dd8 <keypad_read+0x17c>)
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	4a51      	ldr	r2, [pc, #324]	; (8000dd8 <keypad_read+0x17c>)
 8000c92:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000c96:	6153      	str	r3, [r2, #20]
		COL_PORT |= COL_MASK_HIGH0;
 8000c98:	4b4f      	ldr	r3, [pc, #316]	; (8000dd8 <keypad_read+0x17c>)
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	4a4e      	ldr	r2, [pc, #312]	; (8000dd8 <keypad_read+0x17c>)
 8000c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca2:	6153      	str	r3, [r2, #20]
		// read
		rows = ROW_PORT & ROW_MASK;
 8000ca4:	4b4c      	ldr	r3, [pc, #304]	; (8000dd8 <keypad_read+0x17c>)
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	75fb      	strb	r3, [r7, #23]
		// scan rows and return first found value
		if(rows != 0){
 8000cb0:	7dfb      	ldrb	r3, [r7, #23]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d01f      	beq.n	8000cf6 <keypad_read+0x9a>
			if (rows == 8){
 8000cb6:	7dfb      	ldrb	r3, [r7, #23]
 8000cb8:	2b08      	cmp	r3, #8
 8000cba:	d101      	bne.n	8000cc0 <keypad_read+0x64>
				return STAR;
 8000cbc:	230a      	movs	r3, #10
 8000cbe:	e084      	b.n	8000dca <keypad_read+0x16e>
			}
			for (int i = 0; i < 3; i++){
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	e014      	b.n	8000cf0 <keypad_read+0x94>
				if ((rows & 1) == 0){
 8000cc6:	7dfb      	ldrb	r3, [r7, #23]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d103      	bne.n	8000cd8 <keypad_read+0x7c>
					rows = rows >> 1;
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	75fb      	strb	r3, [r7, #23]
 8000cd6:	e008      	b.n	8000cea <keypad_read+0x8e>
				} else {
					return 1 + 3 * i;
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	461a      	mov	r2, r3
 8000cde:	0052      	lsls	r2, r2, #1
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	e06f      	b.n	8000dca <keypad_read+0x16e>
			for (int i = 0; i < 3; i++){
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	3301      	adds	r3, #1
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	dde7      	ble.n	8000cc6 <keypad_read+0x6a>
				}

			}
		}
		// set output
		COL_PORT &= ~COL_MASK;
 8000cf6:	4b38      	ldr	r3, [pc, #224]	; (8000dd8 <keypad_read+0x17c>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	4a37      	ldr	r2, [pc, #220]	; (8000dd8 <keypad_read+0x17c>)
 8000cfc:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000d00:	6153      	str	r3, [r2, #20]
		COL_PORT |= COL_MASK_HIGH1;
 8000d02:	4b35      	ldr	r3, [pc, #212]	; (8000dd8 <keypad_read+0x17c>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4a34      	ldr	r2, [pc, #208]	; (8000dd8 <keypad_read+0x17c>)
 8000d08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d0c:	6153      	str	r3, [r2, #20]
		// read
		rows = ROW_PORT & ROW_MASK;
 8000d0e:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <keypad_read+0x17c>)
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f003 030f 	and.w	r3, r3, #15
 8000d18:	75fb      	strb	r3, [r7, #23]
		// if valid, reset and return
		// scan rows and return first found value
		if(rows != 0){
 8000d1a:	7dfb      	ldrb	r3, [r7, #23]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d01f      	beq.n	8000d60 <keypad_read+0x104>
			if (rows == 8){
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	2b08      	cmp	r3, #8
 8000d24:	d101      	bne.n	8000d2a <keypad_read+0xce>
				return 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e04f      	b.n	8000dca <keypad_read+0x16e>
			}
			for (int i = 0; i < 3; i++){
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	e014      	b.n	8000d5a <keypad_read+0xfe>
				if ((rows & 1) == 0){
 8000d30:	7dfb      	ldrb	r3, [r7, #23]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d103      	bne.n	8000d42 <keypad_read+0xe6>
					rows = rows >> 1;
 8000d3a:	7dfb      	ldrb	r3, [r7, #23]
 8000d3c:	085b      	lsrs	r3, r3, #1
 8000d3e:	75fb      	strb	r3, [r7, #23]
 8000d40:	e008      	b.n	8000d54 <keypad_read+0xf8>
				} else {
					return 2 + 3 * i;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	0052      	lsls	r2, r2, #1
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	3302      	adds	r3, #2
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	e03a      	b.n	8000dca <keypad_read+0x16e>
			for (int i = 0; i < 3; i++){
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	3301      	adds	r3, #1
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	dde7      	ble.n	8000d30 <keypad_read+0xd4>
				}

			}
		}
		// set output
		COL_PORT &= ~COL_MASK;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <keypad_read+0x17c>)
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <keypad_read+0x17c>)
 8000d66:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000d6a:	6153      	str	r3, [r2, #20]
		COL_PORT |= COL_MASK_HIGH2;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <keypad_read+0x17c>)
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <keypad_read+0x17c>)
 8000d72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d76:	6153      	str	r3, [r2, #20]
		// read
		rows = ROW_PORT & ROW_MASK;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <keypad_read+0x17c>)
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	75fb      	strb	r3, [r7, #23]
		// add and shift
		// scan rows and return first found value
		if(rows != 0){
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d01e      	beq.n	8000dc8 <keypad_read+0x16c>
			if (rows == 8){
 8000d8a:	7dfb      	ldrb	r3, [r7, #23]
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d101      	bne.n	8000d94 <keypad_read+0x138>
				return POUND;
 8000d90:	230c      	movs	r3, #12
 8000d92:	e01a      	b.n	8000dca <keypad_read+0x16e>
			}
			for (int i = 0; i < 3; i++){
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	e013      	b.n	8000dc2 <keypad_read+0x166>
				if ((rows & 1) == 0){
 8000d9a:	7dfb      	ldrb	r3, [r7, #23]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d103      	bne.n	8000dac <keypad_read+0x150>
					rows = rows >> 1;
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	085b      	lsrs	r3, r3, #1
 8000da8:	75fb      	strb	r3, [r7, #23]
 8000daa:	e007      	b.n	8000dbc <keypad_read+0x160>
				} else {
					return 3 + 3 * i;
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	3301      	adds	r3, #1
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	0052      	lsls	r2, r2, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	e006      	b.n	8000dca <keypad_read+0x16e>
			for (int i = 0; i < 3; i++){
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	dde8      	ble.n	8000d9a <keypad_read+0x13e>
				}
			}
		}
	}
	return NOKEY;
 8000dc8:	23ff      	movs	r3, #255	; 0xff
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	371c      	adds	r7, #28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	48000800 	.word	0x48000800

08000ddc <main>:
uint32_t dac_value;
uint16_t frequency = 1;


int main(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0

  HAL_Init();
 8000de2:	f000 fb4e 	bl	8001482 <HAL_Init>
  SystemClock_Config();
 8000de6:	f000 fa77 	bl	80012d8 <SystemClock_Config>

  // Set Up Clocks

  // Enable SPI1 clock
  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8000dea:	4b4f      	ldr	r3, [pc, #316]	; (8000f28 <main+0x14c>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dee:	4a4e      	ldr	r2, [pc, #312]	; (8000f28 <main+0x14c>)
 8000df0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000df4:	6613      	str	r3, [r2, #96]	; 0x60
  // Turn on the clock for GPIOA
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; // clock is meant for SPI Pins
 8000df6:	4b4c      	ldr	r3, [pc, #304]	; (8000f28 <main+0x14c>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a4b      	ldr	r2, [pc, #300]	; (8000f28 <main+0x14c>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
  // Turn on the clock for GPIOC
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN; // clock is meant Keypad
 8000e02:	4b49      	ldr	r3, [pc, #292]	; (8000f28 <main+0x14c>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a48      	ldr	r2, [pc, #288]	; (8000f28 <main+0x14c>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c

  keypad_init();
 8000e0e:	f7ff fee1 	bl	8000bd4 <keypad_init>
  DAC_init();
 8000e12:	f7ff fe77 	bl	8000b04 <DAC_init>
  TIM2_init();
 8000e16:	f000 f959 	bl	80010cc <TIM2_init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000e1a:	b662      	cpsie	i
}
 8000e1c:	bf00      	nop

  __enable_irq();

  generate_sine_table();
 8000e1e:	f000 f9a7 	bl	8001170 <generate_sine_table>
  generate_triangle_table();
 8000e22:	f000 f9fd 	bl	8001220 <generate_triangle_table>

  int8_t keypad_val = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	70fb      	strb	r3, [r7, #3]


  while(1)
  {
	  keypad_val = keypad_read();
 8000e2a:	f7ff ff17 	bl	8000c5c <keypad_read>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	70fb      	strb	r3, [r7, #3]

	  // Button debounce delay
	  uint8_t debounce = keypad_val;
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	70bb      	strb	r3, [r7, #2]
	  for (uint32_t i = 0; i < DELAY_TIME; i++);
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	e002      	b.n	8000e42 <main+0x66>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a39      	ldr	r2, [pc, #228]	; (8000f2c <main+0x150>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d9f8      	bls.n	8000e3c <main+0x60>
	  if(keypad_val != -1)
 8000e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e52:	d063      	beq.n	8000f1c <main+0x140>
	  {

		  if (keypad_val == debounce)
 8000e54:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8000e58:	78bb      	ldrb	r3, [r7, #2]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d15e      	bne.n	8000f1c <main+0x140>
		  {
			  switch(keypad_val)
 8000e5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e62:	2b0c      	cmp	r3, #12
 8000e64:	d8e1      	bhi.n	8000e2a <main+0x4e>
 8000e66:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <main+0x90>)
 8000e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6c:	08000ee9 	.word	0x08000ee9
 8000e70:	08000ea1 	.word	0x08000ea1
 8000e74:	08000ea9 	.word	0x08000ea9
 8000e78:	08000eb1 	.word	0x08000eb1
 8000e7c:	08000eb9 	.word	0x08000eb9
 8000e80:	08000ec1 	.word	0x08000ec1
 8000e84:	08000ec9 	.word	0x08000ec9
 8000e88:	08000ed1 	.word	0x08000ed1
 8000e8c:	08000ed9 	.word	0x08000ed9
 8000e90:	08000ee1 	.word	0x08000ee1
 8000e94:	08000ef1 	.word	0x08000ef1
 8000e98:	08000e2b 	.word	0x08000e2b
 8000e9c:	08000f07 	.word	0x08000f07
			  {
				  case 1:
					  // 100 Hz
					  frequency = 1;
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <main+0x154>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	801a      	strh	r2, [r3, #0]
					  break;
 8000ea6:	e03e      	b.n	8000f26 <main+0x14a>

				  case 2:
					  // 200 Hz
					  frequency = 2;
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <main+0x154>)
 8000eaa:	2202      	movs	r2, #2
 8000eac:	801a      	strh	r2, [r3, #0]
					  break;
 8000eae:	e03a      	b.n	8000f26 <main+0x14a>

				  case 3:
					  // 300 Hz
					  frequency = 3;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <main+0x154>)
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	801a      	strh	r2, [r3, #0]
					  break;
 8000eb6:	e036      	b.n	8000f26 <main+0x14a>

				  case 4:
					  // 400 Hz
					  frequency = 4;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <main+0x154>)
 8000eba:	2204      	movs	r2, #4
 8000ebc:	801a      	strh	r2, [r3, #0]
					  break;
 8000ebe:	e032      	b.n	8000f26 <main+0x14a>

				  case 5:
					  // 500 Hz
					  frequency = 5;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <main+0x154>)
 8000ec2:	2205      	movs	r2, #5
 8000ec4:	801a      	strh	r2, [r3, #0]
					  break;
 8000ec6:	e02e      	b.n	8000f26 <main+0x14a>

				  case 6:
					  // Sine wave output
					  waveform = SINE;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <main+0x158>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
					  break;
 8000ece:	e02a      	b.n	8000f26 <main+0x14a>

				  case 7:
					  // Triangle wave output
					  waveform = TRIANGLE;
 8000ed0:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <main+0x158>)
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	701a      	strb	r2, [r3, #0]
					  break;
 8000ed6:	e026      	b.n	8000f26 <main+0x14a>

				  case 8:
					  // Sawtooth/Ramp wave output
					  waveform = RAMP;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <main+0x158>)
 8000eda:	2203      	movs	r2, #3
 8000edc:	701a      	strb	r2, [r3, #0]
					  break;
 8000ede:	e022      	b.n	8000f26 <main+0x14a>

				  case 9:
					  // Square wave output
					  waveform = SQUARE;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <main+0x158>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
					  break;
 8000ee6:	e01e      	b.n	8000f26 <main+0x14a>

				  case 0:
					  // Reset duty_cycle to 50 %
					  duty_cycle = 50;
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <main+0x15c>)
 8000eea:	2232      	movs	r2, #50	; 0x32
 8000eec:	801a      	strh	r2, [r3, #0]
					  break;
 8000eee:	e01a      	b.n	8000f26 <main+0x14a>

				  case 10:				// * key
					  // Decrement duty_cycle by 10 %
					  if (duty_cycle > 10)
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <main+0x15c>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	2b0a      	cmp	r3, #10
 8000ef6:	d913      	bls.n	8000f20 <main+0x144>
						  duty_cycle -= 10;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <main+0x15c>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	3b0a      	subs	r3, #10
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <main+0x15c>)
 8000f02:	801a      	strh	r2, [r3, #0]
					  break;
 8000f04:	e00c      	b.n	8000f20 <main+0x144>

				  case 12:				// # key
					  // Increment duty_cycle by 10 %
					  if (duty_cycle < 90)
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <main+0x15c>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	2b59      	cmp	r3, #89	; 0x59
 8000f0c:	d80a      	bhi.n	8000f24 <main+0x148>
						  duty_cycle += 10;
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <main+0x15c>)
 8000f10:	881b      	ldrh	r3, [r3, #0]
 8000f12:	330a      	adds	r3, #10
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <main+0x15c>)
 8000f18:	801a      	strh	r2, [r3, #0]
					  break;
 8000f1a:	e003      	b.n	8000f24 <main+0x148>


			  }
		  }
 8000f1c:	bf00      	nop
 8000f1e:	e784      	b.n	8000e2a <main+0x4e>
					  break;
 8000f20:	bf00      	nop
 8000f22:	e782      	b.n	8000e2a <main+0x4e>
					  break;
 8000f24:	bf00      	nop
  {
 8000f26:	e780      	b.n	8000e2a <main+0x4e>
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	0003d08f 	.word	0x0003d08f
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000912 	.word	0x20000912
 8000f38:	20000000 	.word	0x20000000

08000f3c <TIM2_IRQHandler>:
}


// Define TIM2 ISR
void TIM2_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	TIM2->SR &= ~((TIM_SR_UIF) | (TIM_SR_CC1IF));	// Clear UIF and CC1IF flag
 8000f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4a:	f023 0303 	bic.w	r3, r3, #3
 8000f4e:	6113      	str	r3, [r2, #16]

	switch(waveform)
 8000f50:	4b54      	ldr	r3, [pc, #336]	; (80010a4 <TIM2_IRQHandler+0x168>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	f200 8099 	bhi.w	800108c <TIM2_IRQHandler+0x150>
 8000f5a:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <TIM2_IRQHandler+0x24>)
 8000f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f60:	08000f71 	.word	0x08000f71
 8000f64:	08000fc3 	.word	0x08000fc3
 8000f68:	08001005 	.word	0x08001005
 8000f6c:	08001047 	.word	0x08001047
	{
		case SQUARE:

			if(count < (duty_cycle * ccr1) / 100)	// Check if count is less than duty cycle percentage of CCR1
 8000f70:	4b4d      	ldr	r3, [pc, #308]	; (80010a8 <TIM2_IRQHandler+0x16c>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b4d      	ldr	r3, [pc, #308]	; (80010ac <TIM2_IRQHandler+0x170>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	fb02 f303 	mul.w	r3, r2, r3
 8000f7e:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <TIM2_IRQHandler+0x174>)
 8000f80:	fba2 2303 	umull	r2, r3, r2, r3
 8000f84:	095a      	lsrs	r2, r3, #5
 8000f86:	4b4b      	ldr	r3, [pc, #300]	; (80010b4 <TIM2_IRQHandler+0x178>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d904      	bls.n	8000f98 <TIM2_IRQHandler+0x5c>
			{
				DAC_write(VOLT_MAX);
 8000f8e:	f640 703c 	movw	r0, #3900	; 0xf3c
 8000f92:	f7ff fded 	bl	8000b70 <DAC_write>
 8000f96:	e002      	b.n	8000f9e <TIM2_IRQHandler+0x62>
			}
			else{
				DAC_write(0);
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff fde9 	bl	8000b70 <DAC_write>
			}
			count = (count + frequency);			// Increment count based on frequency
 8000f9e:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <TIM2_IRQHandler+0x17c>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b43      	ldr	r3, [pc, #268]	; (80010b4 <TIM2_IRQHandler+0x178>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a42      	ldr	r2, [pc, #264]	; (80010b4 <TIM2_IRQHandler+0x178>)
 8000fac:	6013      	str	r3, [r2, #0]
			if(count > (uint32_t)(ccr1))
 8000fae:	4b41      	ldr	r3, [pc, #260]	; (80010b4 <TIM2_IRQHandler+0x178>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b3e      	ldr	r3, [pc, #248]	; (80010ac <TIM2_IRQHandler+0x170>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d965      	bls.n	8001086 <TIM2_IRQHandler+0x14a>
			{
				count = 0;
 8000fba:	4b3e      	ldr	r3, [pc, #248]	; (80010b4 <TIM2_IRQHandler+0x178>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
			}
			break;
 8000fc0:	e061      	b.n	8001086 <TIM2_IRQHandler+0x14a>

		case SINE:
            dac_value = sine_table[count];
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <TIM2_IRQHandler+0x178>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a3d      	ldr	r2, [pc, #244]	; (80010bc <TIM2_IRQHandler+0x180>)
 8000fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <TIM2_IRQHandler+0x184>)
 8000fd0:	601a      	str	r2, [r3, #0]
            DAC_write(dac_value);
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <TIM2_IRQHandler+0x184>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fdc9 	bl	8000b70 <DAC_write>
            count = (count + frequency) % TABLE_SIZE;	// Increment count based on frequency, reset if over table size
 8000fde:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <TIM2_IRQHandler+0x17c>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b33      	ldr	r3, [pc, #204]	; (80010b4 <TIM2_IRQHandler+0x178>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	18d1      	adds	r1, r2, r3
 8000fea:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <TIM2_IRQHandler+0x188>)
 8000fec:	fba3 2301 	umull	r2, r3, r3, r1
 8000ff0:	0a1a      	lsrs	r2, r3, #8
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	019a      	lsls	r2, r3, #6
 8000ffa:	1ad2      	subs	r2, r2, r3
 8000ffc:	1a8a      	subs	r2, r1, r2
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <TIM2_IRQHandler+0x178>)
 8001000:	601a      	str	r2, [r3, #0]
			break;
 8001002:	e043      	b.n	800108c <TIM2_IRQHandler+0x150>

		case TRIANGLE:
            dac_value = triangle_table[count];
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <TIM2_IRQHandler+0x178>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <TIM2_IRQHandler+0x18c>)
 800100a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800100e:	461a      	mov	r2, r3
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <TIM2_IRQHandler+0x184>)
 8001012:	601a      	str	r2, [r3, #0]
            DAC_write(dac_value);
 8001014:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <TIM2_IRQHandler+0x184>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	b29b      	uxth	r3, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fda8 	bl	8000b70 <DAC_write>
            count = (count + frequency) % TABLE_SIZE;	// Increment count based on frequency, reset if over table size
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <TIM2_IRQHandler+0x17c>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <TIM2_IRQHandler+0x178>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	18d1      	adds	r1, r2, r3
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <TIM2_IRQHandler+0x188>)
 800102e:	fba3 2301 	umull	r2, r3, r3, r1
 8001032:	0a1a      	lsrs	r2, r3, #8
 8001034:	4613      	mov	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	4413      	add	r3, r2
 800103a:	019a      	lsls	r2, r3, #6
 800103c:	1ad2      	subs	r2, r2, r3
 800103e:	1a8a      	subs	r2, r1, r2
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <TIM2_IRQHandler+0x178>)
 8001042:	601a      	str	r2, [r3, #0]
            break;
 8001044:	e022      	b.n	800108c <TIM2_IRQHandler+0x150>

		case RAMP:
            DAC_write(VOLT_MAX * count / ccr1);
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <TIM2_IRQHandler+0x178>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f640 723c 	movw	r2, #3900	; 0xf3c
 800104e:	fb03 f202 	mul.w	r2, r3, r2
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <TIM2_IRQHandler+0x170>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	b29b      	uxth	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fd87 	bl	8000b70 <DAC_write>
            count += (frequency);					// Increment count based on frequency
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <TIM2_IRQHandler+0x17c>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <TIM2_IRQHandler+0x178>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4413      	add	r3, r2
 800106e:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <TIM2_IRQHandler+0x178>)
 8001070:	6013      	str	r3, [r2, #0]
            if (count > ccr1)// - 3) 					// subtracting 3 is for some instrument fine tuning
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <TIM2_IRQHandler+0x178>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <TIM2_IRQHandler+0x170>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	d905      	bls.n	800108a <TIM2_IRQHandler+0x14e>
            {
                count = 0;
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <TIM2_IRQHandler+0x178>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
            }
            break;
 8001084:	e001      	b.n	800108a <TIM2_IRQHandler+0x14e>
			break;
 8001086:	bf00      	nop
 8001088:	e000      	b.n	800108c <TIM2_IRQHandler+0x150>
            break;
 800108a:	bf00      	nop

	}
	TIM2->CCR1 += ccr1;								// Increment CCR1 by previous CCR1
 800108c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <TIM2_IRQHandler+0x170>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800109a:	4413      	add	r3, r2
 800109c:	634b      	str	r3, [r1, #52]	; 0x34
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000912 	.word	0x20000912
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000004 	.word	0x20000004
 80010b0:	51eb851f 	.word	0x51eb851f
 80010b4:	20000914 	.word	0x20000914
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000034 	.word	0x20000034
 80010c0:	20000918 	.word	0x20000918
 80010c4:	7395723b 	.word	0x7395723b
 80010c8:	200004a4 	.word	0x200004a4

080010cc <TIM2_init>:



void TIM2_init(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
    // Configure Timer 2
    RCC->APB1ENR1 	|= 	RCC_APB1ENR1_TIM2EN;
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <TIM2_init+0x98>)
 80010d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d4:	4a23      	ldr	r2, [pc, #140]	; (8001164 <TIM2_init+0x98>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6593      	str	r3, [r2, #88]	; 0x58
    TIM2->DIER 		|= 	(TIM_DIER_UIE | TIM_DIER_CC1IE);	// enable update event and compare/capture 1 interrupt
 80010dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e6:	f043 0303 	orr.w	r3, r3, #3
 80010ea:	60d3      	str	r3, [r2, #12]
    TIM2->SR 		&=  ~(TIM_SR_UIF | TIM_SR_CC1IF);		// clear update event and compare/capture 1 flag
 80010ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010f6:	f023 0303 	bic.w	r3, r3, #3
 80010fa:	6113      	str	r3, [r2, #16]
    TIM2->ARR 		= 	arr - 1;
 80010fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001100:	f06f 0201 	mvn.w	r2, #1
 8001104:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CCR1 		= 	ccr1 - 1;
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <TIM2_init+0x9c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800110e:	3b01      	subs	r3, #1
 8001110:	6353      	str	r3, [r2, #52]	; 0x34
    TIM2->CCMR1 	&=  ~(TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC1S_1);	// set output compare mode to Toggle
 8001112:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111c:	f023 0303 	bic.w	r3, r3, #3
 8001120:	6193      	str	r3, [r2, #24]
    TIM2->CCER 		|= 	TIM_CCER_CC1E;						// enable capture/compare channel 1 output
 8001122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6213      	str	r3, [r2, #32]
    TIM2->CR1 		|= 	TIM_CR1_ARPE;						// enable auto-reload preload
 8001132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001140:	6013      	str	r3, [r2, #0]
    TIM2->CR1 		|= 	TIM_CR1_CEN;						// start timer
 8001142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6013      	str	r3, [r2, #0]

    // Enable interrupt in NVIC
    NVIC->ISER[0] = (1 << (TIM2_IRQn & 0x1F));
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <TIM2_init+0xa0>)
 8001154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001158:	601a      	str	r2, [r3, #0]
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	40021000 	.word	0x40021000
 8001168:	20000004 	.word	0x20000004
 800116c:	e000e100 	.word	0xe000e100

08001170 <generate_sine_table>:


void generate_sine_table(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
    for (int i = 0; i < TABLE_SIZE; i++) {
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	e039      	b.n	80011f0 <generate_sine_table+0x80>
    	sine_table[i] = (uint16_t) (VOLT_MAX / 2.0 * sin(2 * M_PI * i / TABLE_SIZE) + VOLT_MAX / 2.0);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff f975 	bl	800046c <__aeabi_i2d>
 8001182:	a325      	add	r3, pc, #148	; (adr r3, 8001218 <generate_sine_table+0xa8>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff f9da 	bl	8000540 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <generate_sine_table+0xa0>)
 800119a:	f7ff fafb 	bl	8000794 <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	ec43 2b17 	vmov	d7, r2, r3
 80011a6:	eeb0 0a47 	vmov.f32	s0, s14
 80011aa:	eef0 0a67 	vmov.f32	s1, s15
 80011ae:	f001 f91b 	bl	80023e8 <sin>
 80011b2:	ec51 0b10 	vmov	r0, r1, d0
 80011b6:	a314      	add	r3, pc, #80	; (adr r3, 8001208 <generate_sine_table+0x98>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f7ff f9c0 	bl	8000540 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	a30f      	add	r3, pc, #60	; (adr r3, 8001208 <generate_sine_table+0x98>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff f801 	bl	80001d4 <__adddf3>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fc73 	bl	8000ac4 <__aeabi_d2uiz>
 80011de:	4603      	mov	r3, r0
 80011e0:	b299      	uxth	r1, r3
 80011e2:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <generate_sine_table+0xa4>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < TABLE_SIZE; i++) {
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3301      	adds	r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f240 2236 	movw	r2, #566	; 0x236
 80011f6:	4293      	cmp	r3, r2
 80011f8:	ddc0      	ble.n	800117c <generate_sine_table+0xc>
    }
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	f3af 8000 	nop.w
 8001208:	00000000 	.word	0x00000000
 800120c:	409e7800 	.word	0x409e7800
 8001210:	4081b800 	.word	0x4081b800
 8001214:	20000034 	.word	0x20000034
 8001218:	54442d18 	.word	0x54442d18
 800121c:	401921fb 	.word	0x401921fb

08001220 <generate_triangle_table>:

void generate_triangle_table(void) {
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
  uint16_t half_size = TABLE_SIZE / 2;
 8001226:	f240 131b 	movw	r3, #283	; 0x11b
 800122a:	817b      	strh	r3, [r7, #10]
  float slope = (float)VOLT_MAX / half_size;
 800122c:	897b      	ldrh	r3, [r7, #10]
 800122e:	ee07 3a90 	vmov	s15, r3
 8001232:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001236:	eddf 6a26 	vldr	s13, [pc, #152]	; 80012d0 <generate_triangle_table+0xb0>
 800123a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800123e:	edc7 7a01 	vstr	s15, [r7, #4]

  // Generate first half of the triangle wave
  for (uint16_t i = 0; i < half_size; i++) {
 8001242:	2300      	movs	r3, #0
 8001244:	81fb      	strh	r3, [r7, #14]
 8001246:	e014      	b.n	8001272 <generate_triangle_table+0x52>
    triangle_table[i] = (uint16_t)(slope * i);
 8001248:	89fb      	ldrh	r3, [r7, #14]
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001252:	edd7 7a01 	vldr	s15, [r7, #4]
 8001256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125a:	89fb      	ldrh	r3, [r7, #14]
 800125c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001260:	ee17 2a90 	vmov	r2, s15
 8001264:	b291      	uxth	r1, r2
 8001266:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <generate_triangle_table+0xb4>)
 8001268:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (uint16_t i = 0; i < half_size; i++) {
 800126c:	89fb      	ldrh	r3, [r7, #14]
 800126e:	3301      	adds	r3, #1
 8001270:	81fb      	strh	r3, [r7, #14]
 8001272:	89fa      	ldrh	r2, [r7, #14]
 8001274:	897b      	ldrh	r3, [r7, #10]
 8001276:	429a      	cmp	r2, r3
 8001278:	d3e6      	bcc.n	8001248 <generate_triangle_table+0x28>
  }

  // Generate second half of the triangle wave
  for (uint16_t i = half_size; i < TABLE_SIZE; i++) {
 800127a:	897b      	ldrh	r3, [r7, #10]
 800127c:	81bb      	strh	r3, [r7, #12]
 800127e:	e01a      	b.n	80012b6 <generate_triangle_table+0x96>
    triangle_table[i] = (uint16_t)(VOLT_MAX - slope * (i - half_size));
 8001280:	89ba      	ldrh	r2, [r7, #12]
 8001282:	897b      	ldrh	r3, [r7, #10]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001296:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80012d0 <generate_triangle_table+0xb0>
 800129a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129e:	89bb      	ldrh	r3, [r7, #12]
 80012a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a4:	ee17 2a90 	vmov	r2, s15
 80012a8:	b291      	uxth	r1, r2
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <generate_triangle_table+0xb4>)
 80012ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (uint16_t i = half_size; i < TABLE_SIZE; i++) {
 80012b0:	89bb      	ldrh	r3, [r7, #12]
 80012b2:	3301      	adds	r3, #1
 80012b4:	81bb      	strh	r3, [r7, #12]
 80012b6:	89bb      	ldrh	r3, [r7, #12]
 80012b8:	f240 2236 	movw	r2, #566	; 0x236
 80012bc:	4293      	cmp	r3, r2
 80012be:	d9df      	bls.n	8001280 <generate_triangle_table+0x60>
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	4573c000 	.word	0x4573c000
 80012d4:	200004a4 	.word	0x200004a4

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b096      	sub	sp, #88	; 0x58
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	2244      	movs	r2, #68	; 0x44
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 f876 	bl	80023d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80012fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012fe:	f000 fa29 	bl	8001754 <HAL_PWREx_ControlVoltageScaling>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001308:	f000 f82c 	bl	8001364 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800130c:	2310      	movs	r3, #16
 800130e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001310:	2301      	movs	r3, #1
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10; // Set frequency to 32 MHz
 8001318:	23a0      	movs	r3, #160	; 0xa0
 800131a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800131c:	2300      	movs	r3, #0
 800131e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fa6b 	bl	8001800 <HAL_RCC_OscConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001330:	f000 f818 	bl	8001364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001334:	230f      	movs	r3, #15
 8001336:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fe33 	bl	8001fb8 <HAL_RCC_ClockConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001358:	f000 f804 	bl	8001364 <Error_Handler>
  }
}
 800135c:	bf00      	nop
 800135e:	3758      	adds	r7, #88	; 0x58
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136c:	e7fe      	b.n	800136c <Error_Handler+0x8>
	...

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_MspInit+0x44>)
 8001378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137a:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <HAL_MspInit+0x44>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6613      	str	r3, [r2, #96]	; 0x60
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_MspInit+0x44>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_MspInit+0x44>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <HAL_MspInit+0x44>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6593      	str	r3, [r2, #88]	; 0x58
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_MspInit+0x44>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler+0x4>

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001404:	f000 f892 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <SystemInit+0x20>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <SystemInit+0x20>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001468 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001434:	f7ff ffea 	bl	800140c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <LoopForever+0x6>)
  ldr r1, =_edata
 800143a:	490d      	ldr	r1, [pc, #52]	; (8001470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800143c:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <LoopForever+0xe>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001450:	4c0a      	ldr	r4, [pc, #40]	; (800147c <LoopForever+0x16>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800145e:	f000 ff97 	bl	8002390 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001462:	f7ff fcbb 	bl	8000ddc <main>

08001466 <LoopForever>:

LoopForever:
    b LoopForever
 8001466:	e7fe      	b.n	8001466 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001468:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001474:	080036b8 	.word	0x080036b8
  ldr r2, =_sbss
 8001478:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800147c:	20000920 	.word	0x20000920

08001480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC1_2_IRQHandler>

08001482 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 f91f 	bl	80016d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001492:	200f      	movs	r0, #15
 8001494:	f000 f80e 	bl	80014b4 <HAL_InitTick>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	e001      	b.n	80014a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014a4:	f7ff ff64 	bl	8001370 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014a8:	79fb      	ldrb	r3, [r7, #7]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014c0:	4b17      	ldr	r3, [pc, #92]	; (8001520 <HAL_InitTick+0x6c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d023      	beq.n	8001510 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_InitTick+0x70>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <HAL_InitTick+0x6c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f91d 	bl	800171e <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10f      	bne.n	800150a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b0f      	cmp	r3, #15
 80014ee:	d809      	bhi.n	8001504 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f0:	2200      	movs	r2, #0
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014f8:	f000 f8f5 	bl	80016e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014fc:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <HAL_InitTick+0x74>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e007      	b.n	8001514 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	e004      	b.n	8001514 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	73fb      	strb	r3, [r7, #15]
 800150e:	e001      	b.n	8001514 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001514:	7bfb      	ldrb	r3, [r7, #15]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000014 	.word	0x20000014
 8001524:	2000000c 	.word	0x2000000c
 8001528:	20000010 	.word	0x20000010

0800152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x24>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_IncTick+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000014 	.word	0x20000014
 8001550:	2000091c 	.word	0x2000091c

08001554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	; (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	2000091c 	.word	0x2000091c

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001594:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db0a      	blt.n	80015fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	490c      	ldr	r1, [pc, #48]	; (800161c <__NVIC_SetPriority+0x4c>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	0112      	lsls	r2, r2, #4
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f8:	e00a      	b.n	8001610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4908      	ldr	r1, [pc, #32]	; (8001620 <__NVIC_SetPriority+0x50>)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3b04      	subs	r3, #4
 8001608:	0112      	lsls	r2, r2, #4
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	440b      	add	r3, r1
 800160e:	761a      	strb	r2, [r3, #24]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0307 	and.w	r3, r3, #7
 8001636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f1c3 0307 	rsb	r3, r3, #7
 800163e:	2b04      	cmp	r3, #4
 8001640:	bf28      	it	cs
 8001642:	2304      	movcs	r3, #4
 8001644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3304      	adds	r3, #4
 800164a:	2b06      	cmp	r3, #6
 800164c:	d902      	bls.n	8001654 <NVIC_EncodePriority+0x30>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3b03      	subs	r3, #3
 8001652:	e000      	b.n	8001656 <NVIC_EncodePriority+0x32>
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800166c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	43d9      	mvns	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	4313      	orrs	r3, r2
         );
}
 800167e:	4618      	mov	r0, r3
 8001680:	3724      	adds	r7, #36	; 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800169c:	d301      	bcc.n	80016a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169e:	2301      	movs	r3, #1
 80016a0:	e00f      	b.n	80016c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <SysTick_Config+0x40>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016aa:	210f      	movs	r1, #15
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016b0:	f7ff ff8e 	bl	80015d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <SysTick_Config+0x40>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ba:	4b04      	ldr	r3, [pc, #16]	; (80016cc <SysTick_Config+0x40>)
 80016bc:	2207      	movs	r2, #7
 80016be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	e000e010 	.word	0xe000e010

080016d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff47 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016f8:	f7ff ff5c 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 80016fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	6978      	ldr	r0, [r7, #20]
 8001704:	f7ff ff8e 	bl	8001624 <NVIC_EncodePriority>
 8001708:	4602      	mov	r2, r0
 800170a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff5d 	bl	80015d0 <__NVIC_SetPriority>
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffb0 	bl	800168c <SysTick_Config>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <HAL_PWREx_GetVoltageRange+0x18>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40007000 	.word	0x40007000

08001754 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001762:	d130      	bne.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800176c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001770:	d038      	beq.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800177a:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800177c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001780:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2232      	movs	r2, #50	; 0x32
 8001788:	fb02 f303 	mul.w	r3, r2, r3
 800178c:	4a1b      	ldr	r2, [pc, #108]	; (80017fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0c9b      	lsrs	r3, r3, #18
 8001794:	3301      	adds	r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001798:	e002      	b.n	80017a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3b01      	subs	r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ac:	d102      	bne.n	80017b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f2      	bne.n	800179a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017c0:	d110      	bne.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e00f      	b.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d2:	d007      	beq.n	80017e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017dc:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40007000 	.word	0x40007000
 80017f8:	2000000c 	.word	0x2000000c
 80017fc:	431bde83 	.word	0x431bde83

08001800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e3ca      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001812:	4b97      	ldr	r3, [pc, #604]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800181c:	4b94      	ldr	r3, [pc, #592]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 80e4 	beq.w	80019fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d007      	beq.n	800184a <HAL_RCC_OscConfig+0x4a>
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	2b0c      	cmp	r3, #12
 800183e:	f040 808b 	bne.w	8001958 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2b01      	cmp	r3, #1
 8001846:	f040 8087 	bne.w	8001958 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800184a:	4b89      	ldr	r3, [pc, #548]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_RCC_OscConfig+0x62>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e3a2      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1a      	ldr	r2, [r3, #32]
 8001866:	4b82      	ldr	r3, [pc, #520]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <HAL_RCC_OscConfig+0x7c>
 8001872:	4b7f      	ldr	r3, [pc, #508]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800187a:	e005      	b.n	8001888 <HAL_RCC_OscConfig+0x88>
 800187c:	4b7c      	ldr	r3, [pc, #496]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 800187e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001888:	4293      	cmp	r3, r2
 800188a:	d223      	bcs.n	80018d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4618      	mov	r0, r3
 8001892:	f000 fd1d 	bl	80022d0 <RCC_SetFlashLatencyFromMSIRange>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e383      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018a0:	4b73      	ldr	r3, [pc, #460]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a72      	ldr	r2, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b70      	ldr	r3, [pc, #448]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	496d      	ldr	r1, [pc, #436]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018be:	4b6c      	ldr	r3, [pc, #432]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	4968      	ldr	r1, [pc, #416]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
 80018d2:	e025      	b.n	8001920 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d4:	4b66      	ldr	r3, [pc, #408]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a65      	ldr	r2, [pc, #404]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018da:	f043 0308 	orr.w	r3, r3, #8
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b63      	ldr	r3, [pc, #396]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4960      	ldr	r1, [pc, #384]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f2:	4b5f      	ldr	r3, [pc, #380]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	495b      	ldr	r1, [pc, #364]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d109      	bne.n	8001920 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fcdd 	bl	80022d0 <RCC_SetFlashLatencyFromMSIRange>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e343      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001920:	f000 fc4a 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8001924:	4602      	mov	r2, r0
 8001926:	4b52      	ldr	r3, [pc, #328]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	091b      	lsrs	r3, r3, #4
 800192c:	f003 030f 	and.w	r3, r3, #15
 8001930:	4950      	ldr	r1, [pc, #320]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001932:	5ccb      	ldrb	r3, [r1, r3]
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
 800193c:	4a4e      	ldr	r2, [pc, #312]	; (8001a78 <HAL_RCC_OscConfig+0x278>)
 800193e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001940:	4b4e      	ldr	r3, [pc, #312]	; (8001a7c <HAL_RCC_OscConfig+0x27c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fdb5 	bl	80014b4 <HAL_InitTick>
 800194a:	4603      	mov	r3, r0
 800194c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d052      	beq.n	80019fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	e327      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d032      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001960:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a42      	ldr	r2, [pc, #264]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800196c:	f7ff fdf2 	bl	8001554 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001974:	f7ff fdee 	bl	8001554 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e310      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001986:	4b3a      	ldr	r3, [pc, #232]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001992:	4b37      	ldr	r3, [pc, #220]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a36      	ldr	r2, [pc, #216]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001998:	f043 0308 	orr.w	r3, r3, #8
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4931      	ldr	r1, [pc, #196]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b0:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	021b      	lsls	r3, r3, #8
 80019be:	492c      	ldr	r1, [pc, #176]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
 80019c4:	e01a      	b.n	80019fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019c6:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a29      	ldr	r2, [pc, #164]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019d2:	f7ff fdbf 	bl	8001554 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019da:	f7ff fdbb 	bl	8001554 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e2dd      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019ec:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f0      	bne.n	80019da <HAL_RCC_OscConfig+0x1da>
 80019f8:	e000      	b.n	80019fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d074      	beq.n	8001af2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d005      	beq.n	8001a1a <HAL_RCC_OscConfig+0x21a>
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	2b0c      	cmp	r3, #12
 8001a12:	d10e      	bne.n	8001a32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d10b      	bne.n	8001a32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d064      	beq.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d160      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e2ba      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x24a>
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e026      	b.n	8001a98 <HAL_RCC_OscConfig+0x298>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a52:	d115      	bne.n	8001a80 <HAL_RCC_OscConfig+0x280>
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a02      	ldr	r2, [pc, #8]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	e014      	b.n	8001a98 <HAL_RCC_OscConfig+0x298>
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	08003498 	.word	0x08003498
 8001a78:	2000000c 	.word	0x2000000c
 8001a7c:	20000010 	.word	0x20000010
 8001a80:	4ba0      	ldr	r3, [pc, #640]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a9f      	ldr	r2, [pc, #636]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b9d      	ldr	r3, [pc, #628]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a9c      	ldr	r2, [pc, #624]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fd58 	bl	8001554 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fd54 	bl	8001554 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e276      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aba:	4b92      	ldr	r3, [pc, #584]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x2a8>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fd44 	bl	8001554 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fd40 	bl	8001554 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e262      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ae2:	4b88      	ldr	r3, [pc, #544]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x2d0>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d060      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_OscConfig+0x310>
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d119      	bne.n	8001b3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d116      	bne.n	8001b3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b10:	4b7c      	ldr	r3, [pc, #496]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_OscConfig+0x328>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e23f      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b76      	ldr	r3, [pc, #472]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	4973      	ldr	r1, [pc, #460]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b3c:	e040      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d023      	beq.n	8001b8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b46:	4b6f      	ldr	r3, [pc, #444]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7ff fcff 	bl	8001554 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5a:	f7ff fcfb 	bl	8001554 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e21d      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6c:	4b65      	ldr	r3, [pc, #404]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	4b62      	ldr	r3, [pc, #392]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	061b      	lsls	r3, r3, #24
 8001b86:	495f      	ldr	r1, [pc, #380]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
 8001b8c:	e018      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a5c      	ldr	r2, [pc, #368]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fcdb 	bl	8001554 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7ff fcd7 	bl	8001554 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e1f9      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bb4:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d03c      	beq.n	8001c46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01c      	beq.n	8001c0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd4:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bda:	4a4a      	ldr	r2, [pc, #296]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff fcb6 	bl	8001554 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bec:	f7ff fcb2 	bl	8001554 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1d4      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0ef      	beq.n	8001bec <HAL_RCC_OscConfig+0x3ec>
 8001c0c:	e01b      	b.n	8001c46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c14:	4a3b      	ldr	r2, [pc, #236]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c16:	f023 0301 	bic.w	r3, r3, #1
 8001c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fc99 	bl	8001554 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c26:	f7ff fc95 	bl	8001554 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1b7      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c38:	4b32      	ldr	r3, [pc, #200]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1ef      	bne.n	8001c26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80a6 	beq.w	8001da0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c58:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10d      	bne.n	8001c80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c80:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <HAL_RCC_OscConfig+0x508>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d118      	bne.n	8001cbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_RCC_OscConfig+0x508>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_RCC_OscConfig+0x508>)
 8001c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c98:	f7ff fc5c 	bl	8001554 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca0:	f7ff fc58 	bl	8001554 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e17a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_RCC_OscConfig+0x508>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d108      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x4d8>
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd6:	e029      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d115      	bne.n	8001d0c <HAL_RCC_OscConfig+0x50c>
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	4a03      	ldr	r2, [pc, #12]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d00:	e014      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	4b9c      	ldr	r3, [pc, #624]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d12:	4a9b      	ldr	r2, [pc, #620]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d1c:	4b98      	ldr	r3, [pc, #608]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d22:	4a97      	ldr	r2, [pc, #604]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001d24:	f023 0304 	bic.w	r3, r3, #4
 8001d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d016      	beq.n	8001d62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff fc0e 	bl	8001554 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff fc0a 	bl	8001554 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e12a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d52:	4b8b      	ldr	r3, [pc, #556]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0ed      	beq.n	8001d3c <HAL_RCC_OscConfig+0x53c>
 8001d60:	e015      	b.n	8001d8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d62:	f7ff fbf7 	bl	8001554 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7ff fbf3 	bl	8001554 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e113      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d80:	4b7f      	ldr	r3, [pc, #508]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1ed      	bne.n	8001d6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8e:	7ffb      	ldrb	r3, [r7, #31]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d94:	4b7a      	ldr	r3, [pc, #488]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	4a79      	ldr	r2, [pc, #484]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80fe 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	f040 80d0 	bne.w	8001f54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001db4:	4b72      	ldr	r3, [pc, #456]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f003 0203 	and.w	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d130      	bne.n	8001e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d127      	bne.n	8001e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d11f      	bne.n	8001e2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001df4:	2a07      	cmp	r2, #7
 8001df6:	bf14      	ite	ne
 8001df8:	2201      	movne	r2, #1
 8001dfa:	2200      	moveq	r2, #0
 8001dfc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d113      	bne.n	8001e2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0c:	085b      	lsrs	r3, r3, #1
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d109      	bne.n	8001e2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	085b      	lsrs	r3, r3, #1
 8001e22:	3b01      	subs	r3, #1
 8001e24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d06e      	beq.n	8001f08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	2b0c      	cmp	r3, #12
 8001e2e:	d069      	beq.n	8001f04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e30:	4b53      	ldr	r3, [pc, #332]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e3c:	4b50      	ldr	r3, [pc, #320]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0ad      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e4c:	4b4c      	ldr	r3, [pc, #304]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a4b      	ldr	r2, [pc, #300]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001e52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e58:	f7ff fb7c 	bl	8001554 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e60:	f7ff fb78 	bl	8001554 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e09a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e72:	4b43      	ldr	r3, [pc, #268]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d1f0      	bne.n	8001e60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e7e:	4b40      	ldr	r3, [pc, #256]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	4b40      	ldr	r3, [pc, #256]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e8e:	3a01      	subs	r2, #1
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	4311      	orrs	r1, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e98:	0212      	lsls	r2, r2, #8
 8001e9a:	4311      	orrs	r1, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ea0:	0852      	lsrs	r2, r2, #1
 8001ea2:	3a01      	subs	r2, #1
 8001ea4:	0552      	lsls	r2, r2, #21
 8001ea6:	4311      	orrs	r1, r2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eac:	0852      	lsrs	r2, r2, #1
 8001eae:	3a01      	subs	r2, #1
 8001eb0:	0652      	lsls	r2, r2, #25
 8001eb2:	4311      	orrs	r1, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001eb8:	0912      	lsrs	r2, r2, #4
 8001eba:	0452      	lsls	r2, r2, #17
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	4930      	ldr	r1, [pc, #192]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ec4:	4b2e      	ldr	r3, [pc, #184]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a2d      	ldr	r2, [pc, #180]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ece:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a2a      	ldr	r2, [pc, #168]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001edc:	f7ff fb3a 	bl	8001554 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff fb36 	bl	8001554 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e058      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef6:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f02:	e050      	b.n	8001fa6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e04f      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f08:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d148      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a16      	ldr	r2, [pc, #88]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f2c:	f7ff fb12 	bl	8001554 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f34:	f7ff fb0e 	bl	8001554 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e030      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x734>
 8001f52:	e028      	b.n	8001fa6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d023      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <HAL_RCC_OscConfig+0x780>)
 8001f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7ff faf5 	bl	8001554 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f6c:	e00c      	b.n	8001f88 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7ff faf1 	bl	8001554 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d905      	bls.n	8001f88 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e013      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
 8001f80:	40021000 	.word	0x40021000
 8001f84:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_OscConfig+0x7b0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1ec      	bne.n	8001f6e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_RCC_OscConfig+0x7b0>)
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	4905      	ldr	r1, [pc, #20]	; (8001fb0 <HAL_RCC_OscConfig+0x7b0>)
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_RCC_OscConfig+0x7b4>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
 8001fa0:	e001      	b.n	8001fa6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	feeefffc 	.word	0xfeeefffc

08001fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0e7      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b75      	ldr	r3, [pc, #468]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d910      	bls.n	8001ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b72      	ldr	r3, [pc, #456]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 0207 	bic.w	r2, r3, #7
 8001fe2:	4970      	ldr	r1, [pc, #448]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b6e      	ldr	r3, [pc, #440]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0cf      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d010      	beq.n	800202a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	4b66      	ldr	r3, [pc, #408]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002014:	429a      	cmp	r2, r3
 8002016:	d908      	bls.n	800202a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002018:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4960      	ldr	r1, [pc, #384]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d04c      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203e:	4b5a      	ldr	r3, [pc, #360]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d121      	bne.n	800208e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e0a6      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002056:	4b54      	ldr	r3, [pc, #336]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d115      	bne.n	800208e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e09a      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800206e:	4b4e      	ldr	r3, [pc, #312]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e08e      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800207e:	4b4a      	ldr	r3, [pc, #296]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e086      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800208e:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4943      	ldr	r1, [pc, #268]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020a0:	f7ff fa58 	bl	8001554 <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7ff fa54 	bl	8001554 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e06e      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	4b3a      	ldr	r3, [pc, #232]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 020c 	and.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1eb      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d010      	beq.n	80020fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d208      	bcs.n	80020fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ec:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	492b      	ldr	r1, [pc, #172]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020fe:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d210      	bcs.n	800212e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 0207 	bic.w	r2, r3, #7
 8002114:	4923      	ldr	r1, [pc, #140]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211c:	4b21      	ldr	r3, [pc, #132]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d001      	beq.n	800212e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e036      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d008      	beq.n	800214c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800213a:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	4918      	ldr	r1, [pc, #96]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002148:	4313      	orrs	r3, r2
 800214a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d009      	beq.n	800216c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4910      	ldr	r1, [pc, #64]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	4313      	orrs	r3, r2
 800216a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800216c:	f000 f824 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	490b      	ldr	r1, [pc, #44]	; (80021ac <HAL_RCC_ClockConfig+0x1f4>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
 8002188:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <HAL_RCC_ClockConfig+0x1f8>)
 800218a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1fc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff f98f 	bl	80014b4 <HAL_InitTick>
 8002196:	4603      	mov	r3, r0
 8002198:	72fb      	strb	r3, [r7, #11]

  return status;
 800219a:	7afb      	ldrb	r3, [r7, #11]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40022000 	.word	0x40022000
 80021a8:	40021000 	.word	0x40021000
 80021ac:	08003498 	.word	0x08003498
 80021b0:	2000000c 	.word	0x2000000c
 80021b4:	20000010 	.word	0x20000010

080021b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c6:	4b3e      	ldr	r3, [pc, #248]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d0:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x34>
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d121      	bne.n	800222a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d11e      	bne.n	800222a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021ec:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021f8:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	e005      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002208:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002214:	4a2b      	ldr	r2, [pc, #172]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10d      	bne.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b04      	cmp	r3, #4
 800222e:	d102      	bne.n	8002236 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002232:	61bb      	str	r3, [r7, #24]
 8002234:	e004      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d101      	bne.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800223c:	4b23      	ldr	r3, [pc, #140]	; (80022cc <HAL_RCC_GetSysClockFreq+0x114>)
 800223e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d134      	bne.n	80022b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d003      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0xa6>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d003      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0xac>
 800225c:	e005      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002260:	617b      	str	r3, [r7, #20]
      break;
 8002262:	e005      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_GetSysClockFreq+0x114>)
 8002266:	617b      	str	r3, [r7, #20]
      break;
 8002268:	e002      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	617b      	str	r3, [r7, #20]
      break;
 800226e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	3301      	adds	r3, #1
 800227c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	fb03 f202 	mul.w	r2, r3, r2
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	0e5b      	lsrs	r3, r3, #25
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	3301      	adds	r3, #1
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022b0:	69bb      	ldr	r3, [r7, #24]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	080034a8 	.word	0x080034a8
 80022c8:	00f42400 	.word	0x00f42400
 80022cc:	007a1200 	.word	0x007a1200

080022d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022dc:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022e8:	f7ff fa26 	bl	8001738 <HAL_PWREx_GetVoltageRange>
 80022ec:	6178      	str	r0, [r7, #20]
 80022ee:	e014      	b.n	800231a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022f0:	4b25      	ldr	r3, [pc, #148]	; (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f4:	4a24      	ldr	r2, [pc, #144]	; (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fa:	6593      	str	r3, [r2, #88]	; 0x58
 80022fc:	4b22      	ldr	r3, [pc, #136]	; (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002308:	f7ff fa16 	bl	8001738 <HAL_PWREx_GetVoltageRange>
 800230c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800230e:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002312:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002318:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002320:	d10b      	bne.n	800233a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d919      	bls.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2ba0      	cmp	r3, #160	; 0xa0
 800232c:	d902      	bls.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800232e:	2302      	movs	r3, #2
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	e013      	b.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002334:	2301      	movs	r3, #1
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	e010      	b.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b80      	cmp	r3, #128	; 0x80
 800233e:	d902      	bls.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002340:	2303      	movs	r3, #3
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	e00a      	b.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b80      	cmp	r3, #128	; 0x80
 800234a:	d102      	bne.n	8002352 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800234c:	2302      	movs	r3, #2
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	e004      	b.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b70      	cmp	r3, #112	; 0x70
 8002356:	d101      	bne.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002358:	2301      	movs	r3, #1
 800235a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 0207 	bic.w	r2, r3, #7
 8002364:	4909      	ldr	r1, [pc, #36]	; (800238c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800236c:	4b07      	ldr	r3, [pc, #28]	; (800238c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	429a      	cmp	r2, r3
 8002378:	d001      	beq.n	800237e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	40022000 	.word	0x40022000

08002390 <__libc_init_array>:
 8002390:	b570      	push	{r4, r5, r6, lr}
 8002392:	4d0d      	ldr	r5, [pc, #52]	; (80023c8 <__libc_init_array+0x38>)
 8002394:	4c0d      	ldr	r4, [pc, #52]	; (80023cc <__libc_init_array+0x3c>)
 8002396:	1b64      	subs	r4, r4, r5
 8002398:	10a4      	asrs	r4, r4, #2
 800239a:	2600      	movs	r6, #0
 800239c:	42a6      	cmp	r6, r4
 800239e:	d109      	bne.n	80023b4 <__libc_init_array+0x24>
 80023a0:	4d0b      	ldr	r5, [pc, #44]	; (80023d0 <__libc_init_array+0x40>)
 80023a2:	4c0c      	ldr	r4, [pc, #48]	; (80023d4 <__libc_init_array+0x44>)
 80023a4:	f001 f86a 	bl	800347c <_init>
 80023a8:	1b64      	subs	r4, r4, r5
 80023aa:	10a4      	asrs	r4, r4, #2
 80023ac:	2600      	movs	r6, #0
 80023ae:	42a6      	cmp	r6, r4
 80023b0:	d105      	bne.n	80023be <__libc_init_array+0x2e>
 80023b2:	bd70      	pop	{r4, r5, r6, pc}
 80023b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023b8:	4798      	blx	r3
 80023ba:	3601      	adds	r6, #1
 80023bc:	e7ee      	b.n	800239c <__libc_init_array+0xc>
 80023be:	f855 3b04 	ldr.w	r3, [r5], #4
 80023c2:	4798      	blx	r3
 80023c4:	3601      	adds	r6, #1
 80023c6:	e7f2      	b.n	80023ae <__libc_init_array+0x1e>
 80023c8:	080036b0 	.word	0x080036b0
 80023cc:	080036b0 	.word	0x080036b0
 80023d0:	080036b0 	.word	0x080036b0
 80023d4:	080036b4 	.word	0x080036b4

080023d8 <memset>:
 80023d8:	4402      	add	r2, r0
 80023da:	4603      	mov	r3, r0
 80023dc:	4293      	cmp	r3, r2
 80023de:	d100      	bne.n	80023e2 <memset+0xa>
 80023e0:	4770      	bx	lr
 80023e2:	f803 1b01 	strb.w	r1, [r3], #1
 80023e6:	e7f9      	b.n	80023dc <memset+0x4>

080023e8 <sin>:
 80023e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80023ea:	ec53 2b10 	vmov	r2, r3, d0
 80023ee:	4828      	ldr	r0, [pc, #160]	; (8002490 <sin+0xa8>)
 80023f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80023f4:	4281      	cmp	r1, r0
 80023f6:	dc07      	bgt.n	8002408 <sin+0x20>
 80023f8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8002488 <sin+0xa0>
 80023fc:	2000      	movs	r0, #0
 80023fe:	b005      	add	sp, #20
 8002400:	f85d eb04 	ldr.w	lr, [sp], #4
 8002404:	f000 be6c 	b.w	80030e0 <__kernel_sin>
 8002408:	4822      	ldr	r0, [pc, #136]	; (8002494 <sin+0xac>)
 800240a:	4281      	cmp	r1, r0
 800240c:	dd09      	ble.n	8002422 <sin+0x3a>
 800240e:	ee10 0a10 	vmov	r0, s0
 8002412:	4619      	mov	r1, r3
 8002414:	f7fd fedc 	bl	80001d0 <__aeabi_dsub>
 8002418:	ec41 0b10 	vmov	d0, r0, r1
 800241c:	b005      	add	sp, #20
 800241e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002422:	4668      	mov	r0, sp
 8002424:	f000 f838 	bl	8002498 <__ieee754_rem_pio2>
 8002428:	f000 0003 	and.w	r0, r0, #3
 800242c:	2801      	cmp	r0, #1
 800242e:	d00c      	beq.n	800244a <sin+0x62>
 8002430:	2802      	cmp	r0, #2
 8002432:	d011      	beq.n	8002458 <sin+0x70>
 8002434:	b9f0      	cbnz	r0, 8002474 <sin+0x8c>
 8002436:	ed9d 1b02 	vldr	d1, [sp, #8]
 800243a:	ed9d 0b00 	vldr	d0, [sp]
 800243e:	2001      	movs	r0, #1
 8002440:	f000 fe4e 	bl	80030e0 <__kernel_sin>
 8002444:	ec51 0b10 	vmov	r0, r1, d0
 8002448:	e7e6      	b.n	8002418 <sin+0x30>
 800244a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800244e:	ed9d 0b00 	vldr	d0, [sp]
 8002452:	f000 fa2d 	bl	80028b0 <__kernel_cos>
 8002456:	e7f5      	b.n	8002444 <sin+0x5c>
 8002458:	ed9d 1b02 	vldr	d1, [sp, #8]
 800245c:	ed9d 0b00 	vldr	d0, [sp]
 8002460:	2001      	movs	r0, #1
 8002462:	f000 fe3d 	bl	80030e0 <__kernel_sin>
 8002466:	ec53 2b10 	vmov	r2, r3, d0
 800246a:	ee10 0a10 	vmov	r0, s0
 800246e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002472:	e7d1      	b.n	8002418 <sin+0x30>
 8002474:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002478:	ed9d 0b00 	vldr	d0, [sp]
 800247c:	f000 fa18 	bl	80028b0 <__kernel_cos>
 8002480:	e7f1      	b.n	8002466 <sin+0x7e>
 8002482:	bf00      	nop
 8002484:	f3af 8000 	nop.w
	...
 8002490:	3fe921fb 	.word	0x3fe921fb
 8002494:	7fefffff 	.word	0x7fefffff

08002498 <__ieee754_rem_pio2>:
 8002498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800249c:	ed2d 8b02 	vpush	{d8}
 80024a0:	ec55 4b10 	vmov	r4, r5, d0
 80024a4:	4bca      	ldr	r3, [pc, #808]	; (80027d0 <__ieee754_rem_pio2+0x338>)
 80024a6:	b08b      	sub	sp, #44	; 0x2c
 80024a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80024ac:	4598      	cmp	r8, r3
 80024ae:	4682      	mov	sl, r0
 80024b0:	9502      	str	r5, [sp, #8]
 80024b2:	dc08      	bgt.n	80024c6 <__ieee754_rem_pio2+0x2e>
 80024b4:	2200      	movs	r2, #0
 80024b6:	2300      	movs	r3, #0
 80024b8:	ed80 0b00 	vstr	d0, [r0]
 80024bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80024c0:	f04f 0b00 	mov.w	fp, #0
 80024c4:	e028      	b.n	8002518 <__ieee754_rem_pio2+0x80>
 80024c6:	4bc3      	ldr	r3, [pc, #780]	; (80027d4 <__ieee754_rem_pio2+0x33c>)
 80024c8:	4598      	cmp	r8, r3
 80024ca:	dc78      	bgt.n	80025be <__ieee754_rem_pio2+0x126>
 80024cc:	9b02      	ldr	r3, [sp, #8]
 80024ce:	4ec2      	ldr	r6, [pc, #776]	; (80027d8 <__ieee754_rem_pio2+0x340>)
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	ee10 0a10 	vmov	r0, s0
 80024d6:	a3b0      	add	r3, pc, #704	; (adr r3, 8002798 <__ieee754_rem_pio2+0x300>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	4629      	mov	r1, r5
 80024de:	dd39      	ble.n	8002554 <__ieee754_rem_pio2+0xbc>
 80024e0:	f7fd fe76 	bl	80001d0 <__aeabi_dsub>
 80024e4:	45b0      	cmp	r8, r6
 80024e6:	4604      	mov	r4, r0
 80024e8:	460d      	mov	r5, r1
 80024ea:	d01b      	beq.n	8002524 <__ieee754_rem_pio2+0x8c>
 80024ec:	a3ac      	add	r3, pc, #688	; (adr r3, 80027a0 <__ieee754_rem_pio2+0x308>)
 80024ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f2:	f7fd fe6d 	bl	80001d0 <__aeabi_dsub>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	e9ca 2300 	strd	r2, r3, [sl]
 80024fe:	4620      	mov	r0, r4
 8002500:	4629      	mov	r1, r5
 8002502:	f7fd fe65 	bl	80001d0 <__aeabi_dsub>
 8002506:	a3a6      	add	r3, pc, #664	; (adr r3, 80027a0 <__ieee754_rem_pio2+0x308>)
 8002508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250c:	f7fd fe60 	bl	80001d0 <__aeabi_dsub>
 8002510:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002514:	f04f 0b01 	mov.w	fp, #1
 8002518:	4658      	mov	r0, fp
 800251a:	b00b      	add	sp, #44	; 0x2c
 800251c:	ecbd 8b02 	vpop	{d8}
 8002520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002524:	a3a0      	add	r3, pc, #640	; (adr r3, 80027a8 <__ieee754_rem_pio2+0x310>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fd fe51 	bl	80001d0 <__aeabi_dsub>
 800252e:	a3a0      	add	r3, pc, #640	; (adr r3, 80027b0 <__ieee754_rem_pio2+0x318>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	4604      	mov	r4, r0
 8002536:	460d      	mov	r5, r1
 8002538:	f7fd fe4a 	bl	80001d0 <__aeabi_dsub>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	e9ca 2300 	strd	r2, r3, [sl]
 8002544:	4620      	mov	r0, r4
 8002546:	4629      	mov	r1, r5
 8002548:	f7fd fe42 	bl	80001d0 <__aeabi_dsub>
 800254c:	a398      	add	r3, pc, #608	; (adr r3, 80027b0 <__ieee754_rem_pio2+0x318>)
 800254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002552:	e7db      	b.n	800250c <__ieee754_rem_pio2+0x74>
 8002554:	f7fd fe3e 	bl	80001d4 <__adddf3>
 8002558:	45b0      	cmp	r8, r6
 800255a:	4604      	mov	r4, r0
 800255c:	460d      	mov	r5, r1
 800255e:	d016      	beq.n	800258e <__ieee754_rem_pio2+0xf6>
 8002560:	a38f      	add	r3, pc, #572	; (adr r3, 80027a0 <__ieee754_rem_pio2+0x308>)
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	f7fd fe35 	bl	80001d4 <__adddf3>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	e9ca 2300 	strd	r2, r3, [sl]
 8002572:	4620      	mov	r0, r4
 8002574:	4629      	mov	r1, r5
 8002576:	f7fd fe2b 	bl	80001d0 <__aeabi_dsub>
 800257a:	a389      	add	r3, pc, #548	; (adr r3, 80027a0 <__ieee754_rem_pio2+0x308>)
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	f7fd fe28 	bl	80001d4 <__adddf3>
 8002584:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8002588:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800258c:	e7c4      	b.n	8002518 <__ieee754_rem_pio2+0x80>
 800258e:	a386      	add	r3, pc, #536	; (adr r3, 80027a8 <__ieee754_rem_pio2+0x310>)
 8002590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002594:	f7fd fe1e 	bl	80001d4 <__adddf3>
 8002598:	a385      	add	r3, pc, #532	; (adr r3, 80027b0 <__ieee754_rem_pio2+0x318>)
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	4604      	mov	r4, r0
 80025a0:	460d      	mov	r5, r1
 80025a2:	f7fd fe17 	bl	80001d4 <__adddf3>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	e9ca 2300 	strd	r2, r3, [sl]
 80025ae:	4620      	mov	r0, r4
 80025b0:	4629      	mov	r1, r5
 80025b2:	f7fd fe0d 	bl	80001d0 <__aeabi_dsub>
 80025b6:	a37e      	add	r3, pc, #504	; (adr r3, 80027b0 <__ieee754_rem_pio2+0x318>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	e7e0      	b.n	8002580 <__ieee754_rem_pio2+0xe8>
 80025be:	4b87      	ldr	r3, [pc, #540]	; (80027dc <__ieee754_rem_pio2+0x344>)
 80025c0:	4598      	cmp	r8, r3
 80025c2:	f300 80d9 	bgt.w	8002778 <__ieee754_rem_pio2+0x2e0>
 80025c6:	f000 fe49 	bl	800325c <fabs>
 80025ca:	ec55 4b10 	vmov	r4, r5, d0
 80025ce:	ee10 0a10 	vmov	r0, s0
 80025d2:	a379      	add	r3, pc, #484	; (adr r3, 80027b8 <__ieee754_rem_pio2+0x320>)
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	4629      	mov	r1, r5
 80025da:	f7fd ffb1 	bl	8000540 <__aeabi_dmul>
 80025de:	4b80      	ldr	r3, [pc, #512]	; (80027e0 <__ieee754_rem_pio2+0x348>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	f7fd fdf7 	bl	80001d4 <__adddf3>
 80025e6:	f7fe fa45 	bl	8000a74 <__aeabi_d2iz>
 80025ea:	4683      	mov	fp, r0
 80025ec:	f7fd ff3e 	bl	800046c <__aeabi_i2d>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	ec43 2b18 	vmov	d8, r2, r3
 80025f8:	a367      	add	r3, pc, #412	; (adr r3, 8002798 <__ieee754_rem_pio2+0x300>)
 80025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fe:	f7fd ff9f 	bl	8000540 <__aeabi_dmul>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4620      	mov	r0, r4
 8002608:	4629      	mov	r1, r5
 800260a:	f7fd fde1 	bl	80001d0 <__aeabi_dsub>
 800260e:	a364      	add	r3, pc, #400	; (adr r3, 80027a0 <__ieee754_rem_pio2+0x308>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	4606      	mov	r6, r0
 8002616:	460f      	mov	r7, r1
 8002618:	ec51 0b18 	vmov	r0, r1, d8
 800261c:	f7fd ff90 	bl	8000540 <__aeabi_dmul>
 8002620:	f1bb 0f1f 	cmp.w	fp, #31
 8002624:	4604      	mov	r4, r0
 8002626:	460d      	mov	r5, r1
 8002628:	dc0d      	bgt.n	8002646 <__ieee754_rem_pio2+0x1ae>
 800262a:	4b6e      	ldr	r3, [pc, #440]	; (80027e4 <__ieee754_rem_pio2+0x34c>)
 800262c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8002630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002634:	4543      	cmp	r3, r8
 8002636:	d006      	beq.n	8002646 <__ieee754_rem_pio2+0x1ae>
 8002638:	4622      	mov	r2, r4
 800263a:	462b      	mov	r3, r5
 800263c:	4630      	mov	r0, r6
 800263e:	4639      	mov	r1, r7
 8002640:	f7fd fdc6 	bl	80001d0 <__aeabi_dsub>
 8002644:	e00f      	b.n	8002666 <__ieee754_rem_pio2+0x1ce>
 8002646:	462b      	mov	r3, r5
 8002648:	4622      	mov	r2, r4
 800264a:	4630      	mov	r0, r6
 800264c:	4639      	mov	r1, r7
 800264e:	f7fd fdbf 	bl	80001d0 <__aeabi_dsub>
 8002652:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002656:	9303      	str	r3, [sp, #12]
 8002658:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800265c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8002660:	f1b8 0f10 	cmp.w	r8, #16
 8002664:	dc02      	bgt.n	800266c <__ieee754_rem_pio2+0x1d4>
 8002666:	e9ca 0100 	strd	r0, r1, [sl]
 800266a:	e039      	b.n	80026e0 <__ieee754_rem_pio2+0x248>
 800266c:	a34e      	add	r3, pc, #312	; (adr r3, 80027a8 <__ieee754_rem_pio2+0x310>)
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	ec51 0b18 	vmov	r0, r1, d8
 8002676:	f7fd ff63 	bl	8000540 <__aeabi_dmul>
 800267a:	4604      	mov	r4, r0
 800267c:	460d      	mov	r5, r1
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4630      	mov	r0, r6
 8002684:	4639      	mov	r1, r7
 8002686:	f7fd fda3 	bl	80001d0 <__aeabi_dsub>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4680      	mov	r8, r0
 8002690:	4689      	mov	r9, r1
 8002692:	4630      	mov	r0, r6
 8002694:	4639      	mov	r1, r7
 8002696:	f7fd fd9b 	bl	80001d0 <__aeabi_dsub>
 800269a:	4622      	mov	r2, r4
 800269c:	462b      	mov	r3, r5
 800269e:	f7fd fd97 	bl	80001d0 <__aeabi_dsub>
 80026a2:	a343      	add	r3, pc, #268	; (adr r3, 80027b0 <__ieee754_rem_pio2+0x318>)
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	4604      	mov	r4, r0
 80026aa:	460d      	mov	r5, r1
 80026ac:	ec51 0b18 	vmov	r0, r1, d8
 80026b0:	f7fd ff46 	bl	8000540 <__aeabi_dmul>
 80026b4:	4622      	mov	r2, r4
 80026b6:	462b      	mov	r3, r5
 80026b8:	f7fd fd8a 	bl	80001d0 <__aeabi_dsub>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4604      	mov	r4, r0
 80026c2:	460d      	mov	r5, r1
 80026c4:	4640      	mov	r0, r8
 80026c6:	4649      	mov	r1, r9
 80026c8:	f7fd fd82 	bl	80001d0 <__aeabi_dsub>
 80026cc:	9a03      	ldr	r2, [sp, #12]
 80026ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b31      	cmp	r3, #49	; 0x31
 80026d6:	dc24      	bgt.n	8002722 <__ieee754_rem_pio2+0x28a>
 80026d8:	e9ca 0100 	strd	r0, r1, [sl]
 80026dc:	4646      	mov	r6, r8
 80026de:	464f      	mov	r7, r9
 80026e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80026e4:	4630      	mov	r0, r6
 80026e6:	4642      	mov	r2, r8
 80026e8:	464b      	mov	r3, r9
 80026ea:	4639      	mov	r1, r7
 80026ec:	f7fd fd70 	bl	80001d0 <__aeabi_dsub>
 80026f0:	462b      	mov	r3, r5
 80026f2:	4622      	mov	r2, r4
 80026f4:	f7fd fd6c 	bl	80001d0 <__aeabi_dsub>
 80026f8:	9b02      	ldr	r3, [sp, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002700:	f6bf af0a 	bge.w	8002518 <__ieee754_rem_pio2+0x80>
 8002704:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002708:	f8ca 3004 	str.w	r3, [sl, #4]
 800270c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002710:	f8ca 8000 	str.w	r8, [sl]
 8002714:	f8ca 0008 	str.w	r0, [sl, #8]
 8002718:	f8ca 300c 	str.w	r3, [sl, #12]
 800271c:	f1cb 0b00 	rsb	fp, fp, #0
 8002720:	e6fa      	b.n	8002518 <__ieee754_rem_pio2+0x80>
 8002722:	a327      	add	r3, pc, #156	; (adr r3, 80027c0 <__ieee754_rem_pio2+0x328>)
 8002724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002728:	ec51 0b18 	vmov	r0, r1, d8
 800272c:	f7fd ff08 	bl	8000540 <__aeabi_dmul>
 8002730:	4604      	mov	r4, r0
 8002732:	460d      	mov	r5, r1
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4640      	mov	r0, r8
 800273a:	4649      	mov	r1, r9
 800273c:	f7fd fd48 	bl	80001d0 <__aeabi_dsub>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4606      	mov	r6, r0
 8002746:	460f      	mov	r7, r1
 8002748:	4640      	mov	r0, r8
 800274a:	4649      	mov	r1, r9
 800274c:	f7fd fd40 	bl	80001d0 <__aeabi_dsub>
 8002750:	4622      	mov	r2, r4
 8002752:	462b      	mov	r3, r5
 8002754:	f7fd fd3c 	bl	80001d0 <__aeabi_dsub>
 8002758:	a31b      	add	r3, pc, #108	; (adr r3, 80027c8 <__ieee754_rem_pio2+0x330>)
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	4604      	mov	r4, r0
 8002760:	460d      	mov	r5, r1
 8002762:	ec51 0b18 	vmov	r0, r1, d8
 8002766:	f7fd feeb 	bl	8000540 <__aeabi_dmul>
 800276a:	4622      	mov	r2, r4
 800276c:	462b      	mov	r3, r5
 800276e:	f7fd fd2f 	bl	80001d0 <__aeabi_dsub>
 8002772:	4604      	mov	r4, r0
 8002774:	460d      	mov	r5, r1
 8002776:	e75f      	b.n	8002638 <__ieee754_rem_pio2+0x1a0>
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <__ieee754_rem_pio2+0x350>)
 800277a:	4598      	cmp	r8, r3
 800277c:	dd36      	ble.n	80027ec <__ieee754_rem_pio2+0x354>
 800277e:	ee10 2a10 	vmov	r2, s0
 8002782:	462b      	mov	r3, r5
 8002784:	4620      	mov	r0, r4
 8002786:	4629      	mov	r1, r5
 8002788:	f7fd fd22 	bl	80001d0 <__aeabi_dsub>
 800278c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002790:	e9ca 0100 	strd	r0, r1, [sl]
 8002794:	e694      	b.n	80024c0 <__ieee754_rem_pio2+0x28>
 8002796:	bf00      	nop
 8002798:	54400000 	.word	0x54400000
 800279c:	3ff921fb 	.word	0x3ff921fb
 80027a0:	1a626331 	.word	0x1a626331
 80027a4:	3dd0b461 	.word	0x3dd0b461
 80027a8:	1a600000 	.word	0x1a600000
 80027ac:	3dd0b461 	.word	0x3dd0b461
 80027b0:	2e037073 	.word	0x2e037073
 80027b4:	3ba3198a 	.word	0x3ba3198a
 80027b8:	6dc9c883 	.word	0x6dc9c883
 80027bc:	3fe45f30 	.word	0x3fe45f30
 80027c0:	2e000000 	.word	0x2e000000
 80027c4:	3ba3198a 	.word	0x3ba3198a
 80027c8:	252049c1 	.word	0x252049c1
 80027cc:	397b839a 	.word	0x397b839a
 80027d0:	3fe921fb 	.word	0x3fe921fb
 80027d4:	4002d97b 	.word	0x4002d97b
 80027d8:	3ff921fb 	.word	0x3ff921fb
 80027dc:	413921fb 	.word	0x413921fb
 80027e0:	3fe00000 	.word	0x3fe00000
 80027e4:	080034d8 	.word	0x080034d8
 80027e8:	7fefffff 	.word	0x7fefffff
 80027ec:	ea4f 5428 	mov.w	r4, r8, asr #20
 80027f0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80027f4:	ee10 0a10 	vmov	r0, s0
 80027f8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80027fc:	ee10 6a10 	vmov	r6, s0
 8002800:	460f      	mov	r7, r1
 8002802:	f7fe f937 	bl	8000a74 <__aeabi_d2iz>
 8002806:	f7fd fe31 	bl	800046c <__aeabi_i2d>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4630      	mov	r0, r6
 8002810:	4639      	mov	r1, r7
 8002812:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002816:	f7fd fcdb 	bl	80001d0 <__aeabi_dsub>
 800281a:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <__ieee754_rem_pio2+0x410>)
 800281c:	2200      	movs	r2, #0
 800281e:	f7fd fe8f 	bl	8000540 <__aeabi_dmul>
 8002822:	460f      	mov	r7, r1
 8002824:	4606      	mov	r6, r0
 8002826:	f7fe f925 	bl	8000a74 <__aeabi_d2iz>
 800282a:	f7fd fe1f 	bl	800046c <__aeabi_i2d>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4630      	mov	r0, r6
 8002834:	4639      	mov	r1, r7
 8002836:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800283a:	f7fd fcc9 	bl	80001d0 <__aeabi_dsub>
 800283e:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <__ieee754_rem_pio2+0x410>)
 8002840:	2200      	movs	r2, #0
 8002842:	f7fd fe7d 	bl	8000540 <__aeabi_dmul>
 8002846:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800284a:	ad04      	add	r5, sp, #16
 800284c:	f04f 0803 	mov.w	r8, #3
 8002850:	46a9      	mov	r9, r5
 8002852:	2600      	movs	r6, #0
 8002854:	2700      	movs	r7, #0
 8002856:	4632      	mov	r2, r6
 8002858:	463b      	mov	r3, r7
 800285a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800285e:	46c3      	mov	fp, r8
 8002860:	3d08      	subs	r5, #8
 8002862:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8002866:	f7fe f8d3 	bl	8000a10 <__aeabi_dcmpeq>
 800286a:	2800      	cmp	r0, #0
 800286c:	d1f3      	bne.n	8002856 <__ieee754_rem_pio2+0x3be>
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <__ieee754_rem_pio2+0x414>)
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	2302      	movs	r3, #2
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	4622      	mov	r2, r4
 8002878:	465b      	mov	r3, fp
 800287a:	4651      	mov	r1, sl
 800287c:	4648      	mov	r0, r9
 800287e:	f000 f8df 	bl	8002a40 <__kernel_rem_pio2>
 8002882:	9b02      	ldr	r3, [sp, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	4683      	mov	fp, r0
 8002888:	f6bf ae46 	bge.w	8002518 <__ieee754_rem_pio2+0x80>
 800288c:	e9da 2100 	ldrd	r2, r1, [sl]
 8002890:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002894:	e9ca 2300 	strd	r2, r3, [sl]
 8002898:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800289c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80028a0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80028a4:	e73a      	b.n	800271c <__ieee754_rem_pio2+0x284>
 80028a6:	bf00      	nop
 80028a8:	41700000 	.word	0x41700000
 80028ac:	08003558 	.word	0x08003558

080028b0 <__kernel_cos>:
 80028b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028b4:	ec57 6b10 	vmov	r6, r7, d0
 80028b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80028bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80028c0:	ed8d 1b00 	vstr	d1, [sp]
 80028c4:	da07      	bge.n	80028d6 <__kernel_cos+0x26>
 80028c6:	ee10 0a10 	vmov	r0, s0
 80028ca:	4639      	mov	r1, r7
 80028cc:	f7fe f8d2 	bl	8000a74 <__aeabi_d2iz>
 80028d0:	2800      	cmp	r0, #0
 80028d2:	f000 8088 	beq.w	80029e6 <__kernel_cos+0x136>
 80028d6:	4632      	mov	r2, r6
 80028d8:	463b      	mov	r3, r7
 80028da:	4630      	mov	r0, r6
 80028dc:	4639      	mov	r1, r7
 80028de:	f7fd fe2f 	bl	8000540 <__aeabi_dmul>
 80028e2:	4b51      	ldr	r3, [pc, #324]	; (8002a28 <__kernel_cos+0x178>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	4604      	mov	r4, r0
 80028e8:	460d      	mov	r5, r1
 80028ea:	f7fd fe29 	bl	8000540 <__aeabi_dmul>
 80028ee:	a340      	add	r3, pc, #256	; (adr r3, 80029f0 <__kernel_cos+0x140>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	4682      	mov	sl, r0
 80028f6:	468b      	mov	fp, r1
 80028f8:	4620      	mov	r0, r4
 80028fa:	4629      	mov	r1, r5
 80028fc:	f7fd fe20 	bl	8000540 <__aeabi_dmul>
 8002900:	a33d      	add	r3, pc, #244	; (adr r3, 80029f8 <__kernel_cos+0x148>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f7fd fc65 	bl	80001d4 <__adddf3>
 800290a:	4622      	mov	r2, r4
 800290c:	462b      	mov	r3, r5
 800290e:	f7fd fe17 	bl	8000540 <__aeabi_dmul>
 8002912:	a33b      	add	r3, pc, #236	; (adr r3, 8002a00 <__kernel_cos+0x150>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd fc5a 	bl	80001d0 <__aeabi_dsub>
 800291c:	4622      	mov	r2, r4
 800291e:	462b      	mov	r3, r5
 8002920:	f7fd fe0e 	bl	8000540 <__aeabi_dmul>
 8002924:	a338      	add	r3, pc, #224	; (adr r3, 8002a08 <__kernel_cos+0x158>)
 8002926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292a:	f7fd fc53 	bl	80001d4 <__adddf3>
 800292e:	4622      	mov	r2, r4
 8002930:	462b      	mov	r3, r5
 8002932:	f7fd fe05 	bl	8000540 <__aeabi_dmul>
 8002936:	a336      	add	r3, pc, #216	; (adr r3, 8002a10 <__kernel_cos+0x160>)
 8002938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293c:	f7fd fc48 	bl	80001d0 <__aeabi_dsub>
 8002940:	4622      	mov	r2, r4
 8002942:	462b      	mov	r3, r5
 8002944:	f7fd fdfc 	bl	8000540 <__aeabi_dmul>
 8002948:	a333      	add	r3, pc, #204	; (adr r3, 8002a18 <__kernel_cos+0x168>)
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	f7fd fc41 	bl	80001d4 <__adddf3>
 8002952:	4622      	mov	r2, r4
 8002954:	462b      	mov	r3, r5
 8002956:	f7fd fdf3 	bl	8000540 <__aeabi_dmul>
 800295a:	4622      	mov	r2, r4
 800295c:	462b      	mov	r3, r5
 800295e:	f7fd fdef 	bl	8000540 <__aeabi_dmul>
 8002962:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002966:	4604      	mov	r4, r0
 8002968:	460d      	mov	r5, r1
 800296a:	4630      	mov	r0, r6
 800296c:	4639      	mov	r1, r7
 800296e:	f7fd fde7 	bl	8000540 <__aeabi_dmul>
 8002972:	460b      	mov	r3, r1
 8002974:	4602      	mov	r2, r0
 8002976:	4629      	mov	r1, r5
 8002978:	4620      	mov	r0, r4
 800297a:	f7fd fc29 	bl	80001d0 <__aeabi_dsub>
 800297e:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <__kernel_cos+0x17c>)
 8002980:	4598      	cmp	r8, r3
 8002982:	4606      	mov	r6, r0
 8002984:	460f      	mov	r7, r1
 8002986:	dc10      	bgt.n	80029aa <__kernel_cos+0xfa>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4650      	mov	r0, sl
 800298e:	4659      	mov	r1, fp
 8002990:	f7fd fc1e 	bl	80001d0 <__aeabi_dsub>
 8002994:	460b      	mov	r3, r1
 8002996:	4926      	ldr	r1, [pc, #152]	; (8002a30 <__kernel_cos+0x180>)
 8002998:	4602      	mov	r2, r0
 800299a:	2000      	movs	r0, #0
 800299c:	f7fd fc18 	bl	80001d0 <__aeabi_dsub>
 80029a0:	ec41 0b10 	vmov	d0, r0, r1
 80029a4:	b003      	add	sp, #12
 80029a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029aa:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <__kernel_cos+0x184>)
 80029ac:	4920      	ldr	r1, [pc, #128]	; (8002a30 <__kernel_cos+0x180>)
 80029ae:	4598      	cmp	r8, r3
 80029b0:	bfcc      	ite	gt
 80029b2:	4d21      	ldrgt	r5, [pc, #132]	; (8002a38 <__kernel_cos+0x188>)
 80029b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80029b8:	2400      	movs	r4, #0
 80029ba:	4622      	mov	r2, r4
 80029bc:	462b      	mov	r3, r5
 80029be:	2000      	movs	r0, #0
 80029c0:	f7fd fc06 	bl	80001d0 <__aeabi_dsub>
 80029c4:	4622      	mov	r2, r4
 80029c6:	4680      	mov	r8, r0
 80029c8:	4689      	mov	r9, r1
 80029ca:	462b      	mov	r3, r5
 80029cc:	4650      	mov	r0, sl
 80029ce:	4659      	mov	r1, fp
 80029d0:	f7fd fbfe 	bl	80001d0 <__aeabi_dsub>
 80029d4:	4632      	mov	r2, r6
 80029d6:	463b      	mov	r3, r7
 80029d8:	f7fd fbfa 	bl	80001d0 <__aeabi_dsub>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4640      	mov	r0, r8
 80029e2:	4649      	mov	r1, r9
 80029e4:	e7da      	b.n	800299c <__kernel_cos+0xec>
 80029e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002a20 <__kernel_cos+0x170>
 80029ea:	e7db      	b.n	80029a4 <__kernel_cos+0xf4>
 80029ec:	f3af 8000 	nop.w
 80029f0:	be8838d4 	.word	0xbe8838d4
 80029f4:	bda8fae9 	.word	0xbda8fae9
 80029f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80029fc:	3e21ee9e 	.word	0x3e21ee9e
 8002a00:	809c52ad 	.word	0x809c52ad
 8002a04:	3e927e4f 	.word	0x3e927e4f
 8002a08:	19cb1590 	.word	0x19cb1590
 8002a0c:	3efa01a0 	.word	0x3efa01a0
 8002a10:	16c15177 	.word	0x16c15177
 8002a14:	3f56c16c 	.word	0x3f56c16c
 8002a18:	5555554c 	.word	0x5555554c
 8002a1c:	3fa55555 	.word	0x3fa55555
 8002a20:	00000000 	.word	0x00000000
 8002a24:	3ff00000 	.word	0x3ff00000
 8002a28:	3fe00000 	.word	0x3fe00000
 8002a2c:	3fd33332 	.word	0x3fd33332
 8002a30:	3ff00000 	.word	0x3ff00000
 8002a34:	3fe90000 	.word	0x3fe90000
 8002a38:	3fd20000 	.word	0x3fd20000
 8002a3c:	00000000 	.word	0x00000000

08002a40 <__kernel_rem_pio2>:
 8002a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a44:	ed2d 8b02 	vpush	{d8}
 8002a48:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8002a4c:	f112 0f14 	cmn.w	r2, #20
 8002a50:	9308      	str	r3, [sp, #32]
 8002a52:	9101      	str	r1, [sp, #4]
 8002a54:	4bc4      	ldr	r3, [pc, #784]	; (8002d68 <__kernel_rem_pio2+0x328>)
 8002a56:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8002a58:	900b      	str	r0, [sp, #44]	; 0x2c
 8002a5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002a5e:	9302      	str	r3, [sp, #8]
 8002a60:	9b08      	ldr	r3, [sp, #32]
 8002a62:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8002a66:	bfa8      	it	ge
 8002a68:	1ed4      	subge	r4, r2, #3
 8002a6a:	9306      	str	r3, [sp, #24]
 8002a6c:	bfb2      	itee	lt
 8002a6e:	2400      	movlt	r4, #0
 8002a70:	2318      	movge	r3, #24
 8002a72:	fb94 f4f3 	sdivge	r4, r4, r3
 8002a76:	f06f 0317 	mvn.w	r3, #23
 8002a7a:	fb04 3303 	mla	r3, r4, r3, r3
 8002a7e:	eb03 0a02 	add.w	sl, r3, r2
 8002a82:	9b02      	ldr	r3, [sp, #8]
 8002a84:	9a06      	ldr	r2, [sp, #24]
 8002a86:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8002d58 <__kernel_rem_pio2+0x318>
 8002a8a:	eb03 0802 	add.w	r8, r3, r2
 8002a8e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8002a90:	1aa7      	subs	r7, r4, r2
 8002a92:	ae22      	add	r6, sp, #136	; 0x88
 8002a94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8002a98:	2500      	movs	r5, #0
 8002a9a:	4545      	cmp	r5, r8
 8002a9c:	dd13      	ble.n	8002ac6 <__kernel_rem_pio2+0x86>
 8002a9e:	9b08      	ldr	r3, [sp, #32]
 8002aa0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8002d58 <__kernel_rem_pio2+0x318>
 8002aa4:	aa22      	add	r2, sp, #136	; 0x88
 8002aa6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8002aaa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8002aae:	f04f 0800 	mov.w	r8, #0
 8002ab2:	9b02      	ldr	r3, [sp, #8]
 8002ab4:	4598      	cmp	r8, r3
 8002ab6:	dc2f      	bgt.n	8002b18 <__kernel_rem_pio2+0xd8>
 8002ab8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8002abc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8002ac0:	462f      	mov	r7, r5
 8002ac2:	2600      	movs	r6, #0
 8002ac4:	e01b      	b.n	8002afe <__kernel_rem_pio2+0xbe>
 8002ac6:	42ef      	cmn	r7, r5
 8002ac8:	d407      	bmi.n	8002ada <__kernel_rem_pio2+0x9a>
 8002aca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8002ace:	f7fd fccd 	bl	800046c <__aeabi_i2d>
 8002ad2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8002ad6:	3501      	adds	r5, #1
 8002ad8:	e7df      	b.n	8002a9a <__kernel_rem_pio2+0x5a>
 8002ada:	ec51 0b18 	vmov	r0, r1, d8
 8002ade:	e7f8      	b.n	8002ad2 <__kernel_rem_pio2+0x92>
 8002ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ae4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8002ae8:	f7fd fd2a 	bl	8000540 <__aeabi_dmul>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002af4:	f7fd fb6e 	bl	80001d4 <__adddf3>
 8002af8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002afc:	3601      	adds	r6, #1
 8002afe:	9b06      	ldr	r3, [sp, #24]
 8002b00:	429e      	cmp	r6, r3
 8002b02:	f1a7 0708 	sub.w	r7, r7, #8
 8002b06:	ddeb      	ble.n	8002ae0 <__kernel_rem_pio2+0xa0>
 8002b08:	ed9d 7b04 	vldr	d7, [sp, #16]
 8002b0c:	f108 0801 	add.w	r8, r8, #1
 8002b10:	ecab 7b02 	vstmia	fp!, {d7}
 8002b14:	3508      	adds	r5, #8
 8002b16:	e7cc      	b.n	8002ab2 <__kernel_rem_pio2+0x72>
 8002b18:	9b02      	ldr	r3, [sp, #8]
 8002b1a:	aa0e      	add	r2, sp, #56	; 0x38
 8002b1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002b20:	930d      	str	r3, [sp, #52]	; 0x34
 8002b22:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8002b24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002b28:	9c02      	ldr	r4, [sp, #8]
 8002b2a:	930c      	str	r3, [sp, #48]	; 0x30
 8002b2c:	00e3      	lsls	r3, r4, #3
 8002b2e:	930a      	str	r3, [sp, #40]	; 0x28
 8002b30:	ab9a      	add	r3, sp, #616	; 0x268
 8002b32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002b36:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8002b3a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8002b3e:	ab72      	add	r3, sp, #456	; 0x1c8
 8002b40:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8002b44:	46c3      	mov	fp, r8
 8002b46:	46a1      	mov	r9, r4
 8002b48:	f1b9 0f00 	cmp.w	r9, #0
 8002b4c:	f1a5 0508 	sub.w	r5, r5, #8
 8002b50:	dc77      	bgt.n	8002c42 <__kernel_rem_pio2+0x202>
 8002b52:	ec47 6b10 	vmov	d0, r6, r7
 8002b56:	4650      	mov	r0, sl
 8002b58:	f000 fc0a 	bl	8003370 <scalbn>
 8002b5c:	ec57 6b10 	vmov	r6, r7, d0
 8002b60:	2200      	movs	r2, #0
 8002b62:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002b66:	ee10 0a10 	vmov	r0, s0
 8002b6a:	4639      	mov	r1, r7
 8002b6c:	f7fd fce8 	bl	8000540 <__aeabi_dmul>
 8002b70:	ec41 0b10 	vmov	d0, r0, r1
 8002b74:	f000 fb7c 	bl	8003270 <floor>
 8002b78:	4b7c      	ldr	r3, [pc, #496]	; (8002d6c <__kernel_rem_pio2+0x32c>)
 8002b7a:	ec51 0b10 	vmov	r0, r1, d0
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f7fd fcde 	bl	8000540 <__aeabi_dmul>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4630      	mov	r0, r6
 8002b8a:	4639      	mov	r1, r7
 8002b8c:	f7fd fb20 	bl	80001d0 <__aeabi_dsub>
 8002b90:	460f      	mov	r7, r1
 8002b92:	4606      	mov	r6, r0
 8002b94:	f7fd ff6e 	bl	8000a74 <__aeabi_d2iz>
 8002b98:	9004      	str	r0, [sp, #16]
 8002b9a:	f7fd fc67 	bl	800046c <__aeabi_i2d>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4630      	mov	r0, r6
 8002ba4:	4639      	mov	r1, r7
 8002ba6:	f7fd fb13 	bl	80001d0 <__aeabi_dsub>
 8002baa:	f1ba 0f00 	cmp.w	sl, #0
 8002bae:	4606      	mov	r6, r0
 8002bb0:	460f      	mov	r7, r1
 8002bb2:	dd6d      	ble.n	8002c90 <__kernel_rem_pio2+0x250>
 8002bb4:	1e62      	subs	r2, r4, #1
 8002bb6:	ab0e      	add	r3, sp, #56	; 0x38
 8002bb8:	9d04      	ldr	r5, [sp, #16]
 8002bba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002bbe:	f1ca 0118 	rsb	r1, sl, #24
 8002bc2:	fa40 f301 	asr.w	r3, r0, r1
 8002bc6:	441d      	add	r5, r3
 8002bc8:	408b      	lsls	r3, r1
 8002bca:	1ac0      	subs	r0, r0, r3
 8002bcc:	ab0e      	add	r3, sp, #56	; 0x38
 8002bce:	9504      	str	r5, [sp, #16]
 8002bd0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002bd4:	f1ca 0317 	rsb	r3, sl, #23
 8002bd8:	fa40 fb03 	asr.w	fp, r0, r3
 8002bdc:	f1bb 0f00 	cmp.w	fp, #0
 8002be0:	dd65      	ble.n	8002cae <__kernel_rem_pio2+0x26e>
 8002be2:	9b04      	ldr	r3, [sp, #16]
 8002be4:	2200      	movs	r2, #0
 8002be6:	3301      	adds	r3, #1
 8002be8:	9304      	str	r3, [sp, #16]
 8002bea:	4615      	mov	r5, r2
 8002bec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002bf0:	4294      	cmp	r4, r2
 8002bf2:	f300 809c 	bgt.w	8002d2e <__kernel_rem_pio2+0x2ee>
 8002bf6:	f1ba 0f00 	cmp.w	sl, #0
 8002bfa:	dd07      	ble.n	8002c0c <__kernel_rem_pio2+0x1cc>
 8002bfc:	f1ba 0f01 	cmp.w	sl, #1
 8002c00:	f000 80c0 	beq.w	8002d84 <__kernel_rem_pio2+0x344>
 8002c04:	f1ba 0f02 	cmp.w	sl, #2
 8002c08:	f000 80c6 	beq.w	8002d98 <__kernel_rem_pio2+0x358>
 8002c0c:	f1bb 0f02 	cmp.w	fp, #2
 8002c10:	d14d      	bne.n	8002cae <__kernel_rem_pio2+0x26e>
 8002c12:	4632      	mov	r2, r6
 8002c14:	463b      	mov	r3, r7
 8002c16:	4956      	ldr	r1, [pc, #344]	; (8002d70 <__kernel_rem_pio2+0x330>)
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7fd fad9 	bl	80001d0 <__aeabi_dsub>
 8002c1e:	4606      	mov	r6, r0
 8002c20:	460f      	mov	r7, r1
 8002c22:	2d00      	cmp	r5, #0
 8002c24:	d043      	beq.n	8002cae <__kernel_rem_pio2+0x26e>
 8002c26:	4650      	mov	r0, sl
 8002c28:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8002d60 <__kernel_rem_pio2+0x320>
 8002c2c:	f000 fba0 	bl	8003370 <scalbn>
 8002c30:	4630      	mov	r0, r6
 8002c32:	4639      	mov	r1, r7
 8002c34:	ec53 2b10 	vmov	r2, r3, d0
 8002c38:	f7fd faca 	bl	80001d0 <__aeabi_dsub>
 8002c3c:	4606      	mov	r6, r0
 8002c3e:	460f      	mov	r7, r1
 8002c40:	e035      	b.n	8002cae <__kernel_rem_pio2+0x26e>
 8002c42:	4b4c      	ldr	r3, [pc, #304]	; (8002d74 <__kernel_rem_pio2+0x334>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	4630      	mov	r0, r6
 8002c48:	4639      	mov	r1, r7
 8002c4a:	f7fd fc79 	bl	8000540 <__aeabi_dmul>
 8002c4e:	f7fd ff11 	bl	8000a74 <__aeabi_d2iz>
 8002c52:	f7fd fc0b 	bl	800046c <__aeabi_i2d>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	ec43 2b18 	vmov	d8, r2, r3
 8002c5e:	4b46      	ldr	r3, [pc, #280]	; (8002d78 <__kernel_rem_pio2+0x338>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	f7fd fc6d 	bl	8000540 <__aeabi_dmul>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4630      	mov	r0, r6
 8002c6c:	4639      	mov	r1, r7
 8002c6e:	f7fd faaf 	bl	80001d0 <__aeabi_dsub>
 8002c72:	f7fd feff 	bl	8000a74 <__aeabi_d2iz>
 8002c76:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002c7a:	f84b 0b04 	str.w	r0, [fp], #4
 8002c7e:	ec51 0b18 	vmov	r0, r1, d8
 8002c82:	f7fd faa7 	bl	80001d4 <__adddf3>
 8002c86:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002c8a:	4606      	mov	r6, r0
 8002c8c:	460f      	mov	r7, r1
 8002c8e:	e75b      	b.n	8002b48 <__kernel_rem_pio2+0x108>
 8002c90:	d106      	bne.n	8002ca0 <__kernel_rem_pio2+0x260>
 8002c92:	1e63      	subs	r3, r4, #1
 8002c94:	aa0e      	add	r2, sp, #56	; 0x38
 8002c96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c9a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8002c9e:	e79d      	b.n	8002bdc <__kernel_rem_pio2+0x19c>
 8002ca0:	4b36      	ldr	r3, [pc, #216]	; (8002d7c <__kernel_rem_pio2+0x33c>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f7fd fed2 	bl	8000a4c <__aeabi_dcmpge>
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	d13d      	bne.n	8002d28 <__kernel_rem_pio2+0x2e8>
 8002cac:	4683      	mov	fp, r0
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	4630      	mov	r0, r6
 8002cb4:	4639      	mov	r1, r7
 8002cb6:	f7fd feab 	bl	8000a10 <__aeabi_dcmpeq>
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	f000 80c0 	beq.w	8002e40 <__kernel_rem_pio2+0x400>
 8002cc0:	1e65      	subs	r5, r4, #1
 8002cc2:	462b      	mov	r3, r5
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	9902      	ldr	r1, [sp, #8]
 8002cc8:	428b      	cmp	r3, r1
 8002cca:	da6c      	bge.n	8002da6 <__kernel_rem_pio2+0x366>
 8002ccc:	2a00      	cmp	r2, #0
 8002cce:	f000 8089 	beq.w	8002de4 <__kernel_rem_pio2+0x3a4>
 8002cd2:	ab0e      	add	r3, sp, #56	; 0x38
 8002cd4:	f1aa 0a18 	sub.w	sl, sl, #24
 8002cd8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80ad 	beq.w	8002e3c <__kernel_rem_pio2+0x3fc>
 8002ce2:	4650      	mov	r0, sl
 8002ce4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8002d60 <__kernel_rem_pio2+0x320>
 8002ce8:	f000 fb42 	bl	8003370 <scalbn>
 8002cec:	ab9a      	add	r3, sp, #616	; 0x268
 8002cee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002cf2:	ec57 6b10 	vmov	r6, r7, d0
 8002cf6:	00ec      	lsls	r4, r5, #3
 8002cf8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8002cfc:	46aa      	mov	sl, r5
 8002cfe:	f1ba 0f00 	cmp.w	sl, #0
 8002d02:	f280 80d6 	bge.w	8002eb2 <__kernel_rem_pio2+0x472>
 8002d06:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8002d58 <__kernel_rem_pio2+0x318>
 8002d0a:	462e      	mov	r6, r5
 8002d0c:	2e00      	cmp	r6, #0
 8002d0e:	f2c0 8104 	blt.w	8002f1a <__kernel_rem_pio2+0x4da>
 8002d12:	ab72      	add	r3, sp, #456	; 0x1c8
 8002d14:	ed8d 8b06 	vstr	d8, [sp, #24]
 8002d18:	f8df a064 	ldr.w	sl, [pc, #100]	; 8002d80 <__kernel_rem_pio2+0x340>
 8002d1c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8002d20:	f04f 0800 	mov.w	r8, #0
 8002d24:	1baf      	subs	r7, r5, r6
 8002d26:	e0ea      	b.n	8002efe <__kernel_rem_pio2+0x4be>
 8002d28:	f04f 0b02 	mov.w	fp, #2
 8002d2c:	e759      	b.n	8002be2 <__kernel_rem_pio2+0x1a2>
 8002d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8002d32:	b955      	cbnz	r5, 8002d4a <__kernel_rem_pio2+0x30a>
 8002d34:	b123      	cbz	r3, 8002d40 <__kernel_rem_pio2+0x300>
 8002d36:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8002d3a:	f8c8 3000 	str.w	r3, [r8]
 8002d3e:	2301      	movs	r3, #1
 8002d40:	3201      	adds	r2, #1
 8002d42:	f108 0804 	add.w	r8, r8, #4
 8002d46:	461d      	mov	r5, r3
 8002d48:	e752      	b.n	8002bf0 <__kernel_rem_pio2+0x1b0>
 8002d4a:	1acb      	subs	r3, r1, r3
 8002d4c:	f8c8 3000 	str.w	r3, [r8]
 8002d50:	462b      	mov	r3, r5
 8002d52:	e7f5      	b.n	8002d40 <__kernel_rem_pio2+0x300>
 8002d54:	f3af 8000 	nop.w
	...
 8002d64:	3ff00000 	.word	0x3ff00000
 8002d68:	080036a0 	.word	0x080036a0
 8002d6c:	40200000 	.word	0x40200000
 8002d70:	3ff00000 	.word	0x3ff00000
 8002d74:	3e700000 	.word	0x3e700000
 8002d78:	41700000 	.word	0x41700000
 8002d7c:	3fe00000 	.word	0x3fe00000
 8002d80:	08003660 	.word	0x08003660
 8002d84:	1e62      	subs	r2, r4, #1
 8002d86:	ab0e      	add	r3, sp, #56	; 0x38
 8002d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d8c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002d90:	a90e      	add	r1, sp, #56	; 0x38
 8002d92:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8002d96:	e739      	b.n	8002c0c <__kernel_rem_pio2+0x1cc>
 8002d98:	1e62      	subs	r2, r4, #1
 8002d9a:	ab0e      	add	r3, sp, #56	; 0x38
 8002d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002da4:	e7f4      	b.n	8002d90 <__kernel_rem_pio2+0x350>
 8002da6:	a90e      	add	r1, sp, #56	; 0x38
 8002da8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	430a      	orrs	r2, r1
 8002db0:	e789      	b.n	8002cc6 <__kernel_rem_pio2+0x286>
 8002db2:	3301      	adds	r3, #1
 8002db4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8002db8:	2900      	cmp	r1, #0
 8002dba:	d0fa      	beq.n	8002db2 <__kernel_rem_pio2+0x372>
 8002dbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002dbe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8002dc2:	446a      	add	r2, sp
 8002dc4:	3a98      	subs	r2, #152	; 0x98
 8002dc6:	920a      	str	r2, [sp, #40]	; 0x28
 8002dc8:	9a08      	ldr	r2, [sp, #32]
 8002dca:	18e3      	adds	r3, r4, r3
 8002dcc:	18a5      	adds	r5, r4, r2
 8002dce:	aa22      	add	r2, sp, #136	; 0x88
 8002dd0:	f104 0801 	add.w	r8, r4, #1
 8002dd4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8002dd8:	9304      	str	r3, [sp, #16]
 8002dda:	9b04      	ldr	r3, [sp, #16]
 8002ddc:	4543      	cmp	r3, r8
 8002dde:	da04      	bge.n	8002dea <__kernel_rem_pio2+0x3aa>
 8002de0:	461c      	mov	r4, r3
 8002de2:	e6a3      	b.n	8002b2c <__kernel_rem_pio2+0xec>
 8002de4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002de6:	2301      	movs	r3, #1
 8002de8:	e7e4      	b.n	8002db4 <__kernel_rem_pio2+0x374>
 8002dea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002dec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8002df0:	f7fd fb3c 	bl	800046c <__aeabi_i2d>
 8002df4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8002df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002dfa:	46ab      	mov	fp, r5
 8002dfc:	461c      	mov	r4, r3
 8002dfe:	f04f 0900 	mov.w	r9, #0
 8002e02:	2600      	movs	r6, #0
 8002e04:	2700      	movs	r7, #0
 8002e06:	9b06      	ldr	r3, [sp, #24]
 8002e08:	4599      	cmp	r9, r3
 8002e0a:	dd06      	ble.n	8002e1a <__kernel_rem_pio2+0x3da>
 8002e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e0e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8002e12:	f108 0801 	add.w	r8, r8, #1
 8002e16:	930a      	str	r3, [sp, #40]	; 0x28
 8002e18:	e7df      	b.n	8002dda <__kernel_rem_pio2+0x39a>
 8002e1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8002e1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8002e22:	f7fd fb8d 	bl	8000540 <__aeabi_dmul>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	4639      	mov	r1, r7
 8002e2e:	f7fd f9d1 	bl	80001d4 <__adddf3>
 8002e32:	f109 0901 	add.w	r9, r9, #1
 8002e36:	4606      	mov	r6, r0
 8002e38:	460f      	mov	r7, r1
 8002e3a:	e7e4      	b.n	8002e06 <__kernel_rem_pio2+0x3c6>
 8002e3c:	3d01      	subs	r5, #1
 8002e3e:	e748      	b.n	8002cd2 <__kernel_rem_pio2+0x292>
 8002e40:	ec47 6b10 	vmov	d0, r6, r7
 8002e44:	f1ca 0000 	rsb	r0, sl, #0
 8002e48:	f000 fa92 	bl	8003370 <scalbn>
 8002e4c:	ec57 6b10 	vmov	r6, r7, d0
 8002e50:	4ba0      	ldr	r3, [pc, #640]	; (80030d4 <__kernel_rem_pio2+0x694>)
 8002e52:	ee10 0a10 	vmov	r0, s0
 8002e56:	2200      	movs	r2, #0
 8002e58:	4639      	mov	r1, r7
 8002e5a:	f7fd fdf7 	bl	8000a4c <__aeabi_dcmpge>
 8002e5e:	b1f8      	cbz	r0, 8002ea0 <__kernel_rem_pio2+0x460>
 8002e60:	4b9d      	ldr	r3, [pc, #628]	; (80030d8 <__kernel_rem_pio2+0x698>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	4630      	mov	r0, r6
 8002e66:	4639      	mov	r1, r7
 8002e68:	f7fd fb6a 	bl	8000540 <__aeabi_dmul>
 8002e6c:	f7fd fe02 	bl	8000a74 <__aeabi_d2iz>
 8002e70:	4680      	mov	r8, r0
 8002e72:	f7fd fafb 	bl	800046c <__aeabi_i2d>
 8002e76:	4b97      	ldr	r3, [pc, #604]	; (80030d4 <__kernel_rem_pio2+0x694>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f7fd fb61 	bl	8000540 <__aeabi_dmul>
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4602      	mov	r2, r0
 8002e82:	4639      	mov	r1, r7
 8002e84:	4630      	mov	r0, r6
 8002e86:	f7fd f9a3 	bl	80001d0 <__aeabi_dsub>
 8002e8a:	f7fd fdf3 	bl	8000a74 <__aeabi_d2iz>
 8002e8e:	1c65      	adds	r5, r4, #1
 8002e90:	ab0e      	add	r3, sp, #56	; 0x38
 8002e92:	f10a 0a18 	add.w	sl, sl, #24
 8002e96:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8002e9a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8002e9e:	e720      	b.n	8002ce2 <__kernel_rem_pio2+0x2a2>
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	4639      	mov	r1, r7
 8002ea4:	f7fd fde6 	bl	8000a74 <__aeabi_d2iz>
 8002ea8:	ab0e      	add	r3, sp, #56	; 0x38
 8002eaa:	4625      	mov	r5, r4
 8002eac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8002eb0:	e717      	b.n	8002ce2 <__kernel_rem_pio2+0x2a2>
 8002eb2:	ab0e      	add	r3, sp, #56	; 0x38
 8002eb4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8002eb8:	f7fd fad8 	bl	800046c <__aeabi_i2d>
 8002ebc:	4632      	mov	r2, r6
 8002ebe:	463b      	mov	r3, r7
 8002ec0:	f7fd fb3e 	bl	8000540 <__aeabi_dmul>
 8002ec4:	4b84      	ldr	r3, [pc, #528]	; (80030d8 <__kernel_rem_pio2+0x698>)
 8002ec6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8002eca:	2200      	movs	r2, #0
 8002ecc:	4630      	mov	r0, r6
 8002ece:	4639      	mov	r1, r7
 8002ed0:	f7fd fb36 	bl	8000540 <__aeabi_dmul>
 8002ed4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002ed8:	4606      	mov	r6, r0
 8002eda:	460f      	mov	r7, r1
 8002edc:	e70f      	b.n	8002cfe <__kernel_rem_pio2+0x2be>
 8002ede:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8002ee2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8002ee6:	f7fd fb2b 	bl	8000540 <__aeabi_dmul>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002ef2:	f7fd f96f 	bl	80001d4 <__adddf3>
 8002ef6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002efa:	f108 0801 	add.w	r8, r8, #1
 8002efe:	9b02      	ldr	r3, [sp, #8]
 8002f00:	4598      	cmp	r8, r3
 8002f02:	dc01      	bgt.n	8002f08 <__kernel_rem_pio2+0x4c8>
 8002f04:	45b8      	cmp	r8, r7
 8002f06:	ddea      	ble.n	8002ede <__kernel_rem_pio2+0x49e>
 8002f08:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002f0c:	ab4a      	add	r3, sp, #296	; 0x128
 8002f0e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8002f12:	ed87 7b00 	vstr	d7, [r7]
 8002f16:	3e01      	subs	r6, #1
 8002f18:	e6f8      	b.n	8002d0c <__kernel_rem_pio2+0x2cc>
 8002f1a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	dc0b      	bgt.n	8002f38 <__kernel_rem_pio2+0x4f8>
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	dc35      	bgt.n	8002f90 <__kernel_rem_pio2+0x550>
 8002f24:	d059      	beq.n	8002fda <__kernel_rem_pio2+0x59a>
 8002f26:	9b04      	ldr	r3, [sp, #16]
 8002f28:	f003 0007 	and.w	r0, r3, #7
 8002f2c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8002f30:	ecbd 8b02 	vpop	{d8}
 8002f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f38:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d1f3      	bne.n	8002f26 <__kernel_rem_pio2+0x4e6>
 8002f3e:	ab4a      	add	r3, sp, #296	; 0x128
 8002f40:	4423      	add	r3, r4
 8002f42:	9306      	str	r3, [sp, #24]
 8002f44:	461c      	mov	r4, r3
 8002f46:	469a      	mov	sl, r3
 8002f48:	9502      	str	r5, [sp, #8]
 8002f4a:	9b02      	ldr	r3, [sp, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f1aa 0a08 	sub.w	sl, sl, #8
 8002f52:	dc6b      	bgt.n	800302c <__kernel_rem_pio2+0x5ec>
 8002f54:	46aa      	mov	sl, r5
 8002f56:	f1ba 0f01 	cmp.w	sl, #1
 8002f5a:	f1a4 0408 	sub.w	r4, r4, #8
 8002f5e:	f300 8085 	bgt.w	800306c <__kernel_rem_pio2+0x62c>
 8002f62:	9c06      	ldr	r4, [sp, #24]
 8002f64:	2000      	movs	r0, #0
 8002f66:	3408      	adds	r4, #8
 8002f68:	2100      	movs	r1, #0
 8002f6a:	2d01      	cmp	r5, #1
 8002f6c:	f300 809d 	bgt.w	80030aa <__kernel_rem_pio2+0x66a>
 8002f70:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8002f74:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8002f78:	f1bb 0f00 	cmp.w	fp, #0
 8002f7c:	f040 809b 	bne.w	80030b6 <__kernel_rem_pio2+0x676>
 8002f80:	9b01      	ldr	r3, [sp, #4]
 8002f82:	e9c3 5600 	strd	r5, r6, [r3]
 8002f86:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8002f8a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8002f8e:	e7ca      	b.n	8002f26 <__kernel_rem_pio2+0x4e6>
 8002f90:	3408      	adds	r4, #8
 8002f92:	ab4a      	add	r3, sp, #296	; 0x128
 8002f94:	441c      	add	r4, r3
 8002f96:	462e      	mov	r6, r5
 8002f98:	2000      	movs	r0, #0
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	2e00      	cmp	r6, #0
 8002f9e:	da36      	bge.n	800300e <__kernel_rem_pio2+0x5ce>
 8002fa0:	f1bb 0f00 	cmp.w	fp, #0
 8002fa4:	d039      	beq.n	800301a <__kernel_rem_pio2+0x5da>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002fac:	9c01      	ldr	r4, [sp, #4]
 8002fae:	e9c4 2300 	strd	r2, r3, [r4]
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8002fba:	f7fd f909 	bl	80001d0 <__aeabi_dsub>
 8002fbe:	ae4c      	add	r6, sp, #304	; 0x130
 8002fc0:	2401      	movs	r4, #1
 8002fc2:	42a5      	cmp	r5, r4
 8002fc4:	da2c      	bge.n	8003020 <__kernel_rem_pio2+0x5e0>
 8002fc6:	f1bb 0f00 	cmp.w	fp, #0
 8002fca:	d002      	beq.n	8002fd2 <__kernel_rem_pio2+0x592>
 8002fcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	9b01      	ldr	r3, [sp, #4]
 8002fd4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8002fd8:	e7a5      	b.n	8002f26 <__kernel_rem_pio2+0x4e6>
 8002fda:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8002fde:	eb0d 0403 	add.w	r4, sp, r3
 8002fe2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2d00      	cmp	r5, #0
 8002fec:	da09      	bge.n	8003002 <__kernel_rem_pio2+0x5c2>
 8002fee:	f1bb 0f00 	cmp.w	fp, #0
 8002ff2:	d002      	beq.n	8002ffa <__kernel_rem_pio2+0x5ba>
 8002ff4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	9b01      	ldr	r3, [sp, #4]
 8002ffc:	e9c3 0100 	strd	r0, r1, [r3]
 8003000:	e791      	b.n	8002f26 <__kernel_rem_pio2+0x4e6>
 8003002:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003006:	f7fd f8e5 	bl	80001d4 <__adddf3>
 800300a:	3d01      	subs	r5, #1
 800300c:	e7ed      	b.n	8002fea <__kernel_rem_pio2+0x5aa>
 800300e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003012:	f7fd f8df 	bl	80001d4 <__adddf3>
 8003016:	3e01      	subs	r6, #1
 8003018:	e7c0      	b.n	8002f9c <__kernel_rem_pio2+0x55c>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	e7c5      	b.n	8002fac <__kernel_rem_pio2+0x56c>
 8003020:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003024:	f7fd f8d6 	bl	80001d4 <__adddf3>
 8003028:	3401      	adds	r4, #1
 800302a:	e7ca      	b.n	8002fc2 <__kernel_rem_pio2+0x582>
 800302c:	e9da 8900 	ldrd	r8, r9, [sl]
 8003030:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8003034:	9b02      	ldr	r3, [sp, #8]
 8003036:	3b01      	subs	r3, #1
 8003038:	9302      	str	r3, [sp, #8]
 800303a:	4632      	mov	r2, r6
 800303c:	463b      	mov	r3, r7
 800303e:	4640      	mov	r0, r8
 8003040:	4649      	mov	r1, r9
 8003042:	f7fd f8c7 	bl	80001d4 <__adddf3>
 8003046:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4640      	mov	r0, r8
 8003050:	4649      	mov	r1, r9
 8003052:	f7fd f8bd 	bl	80001d0 <__aeabi_dsub>
 8003056:	4632      	mov	r2, r6
 8003058:	463b      	mov	r3, r7
 800305a:	f7fd f8bb 	bl	80001d4 <__adddf3>
 800305e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8003062:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003066:	ed8a 7b00 	vstr	d7, [sl]
 800306a:	e76e      	b.n	8002f4a <__kernel_rem_pio2+0x50a>
 800306c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003070:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8003074:	4640      	mov	r0, r8
 8003076:	4632      	mov	r2, r6
 8003078:	463b      	mov	r3, r7
 800307a:	4649      	mov	r1, r9
 800307c:	f7fd f8aa 	bl	80001d4 <__adddf3>
 8003080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4640      	mov	r0, r8
 800308a:	4649      	mov	r1, r9
 800308c:	f7fd f8a0 	bl	80001d0 <__aeabi_dsub>
 8003090:	4632      	mov	r2, r6
 8003092:	463b      	mov	r3, r7
 8003094:	f7fd f89e 	bl	80001d4 <__adddf3>
 8003098:	ed9d 7b02 	vldr	d7, [sp, #8]
 800309c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80030a0:	ed84 7b00 	vstr	d7, [r4]
 80030a4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80030a8:	e755      	b.n	8002f56 <__kernel_rem_pio2+0x516>
 80030aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80030ae:	f7fd f891 	bl	80001d4 <__adddf3>
 80030b2:	3d01      	subs	r5, #1
 80030b4:	e759      	b.n	8002f6a <__kernel_rem_pio2+0x52a>
 80030b6:	9b01      	ldr	r3, [sp, #4]
 80030b8:	9a01      	ldr	r2, [sp, #4]
 80030ba:	601d      	str	r5, [r3, #0]
 80030bc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80030c0:	605c      	str	r4, [r3, #4]
 80030c2:	609f      	str	r7, [r3, #8]
 80030c4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80030c8:	60d3      	str	r3, [r2, #12]
 80030ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80030ce:	6110      	str	r0, [r2, #16]
 80030d0:	6153      	str	r3, [r2, #20]
 80030d2:	e728      	b.n	8002f26 <__kernel_rem_pio2+0x4e6>
 80030d4:	41700000 	.word	0x41700000
 80030d8:	3e700000 	.word	0x3e700000
 80030dc:	00000000 	.word	0x00000000

080030e0 <__kernel_sin>:
 80030e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e4:	ed2d 8b04 	vpush	{d8-d9}
 80030e8:	eeb0 8a41 	vmov.f32	s16, s2
 80030ec:	eef0 8a61 	vmov.f32	s17, s3
 80030f0:	ec55 4b10 	vmov	r4, r5, d0
 80030f4:	b083      	sub	sp, #12
 80030f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80030fa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80030fe:	9001      	str	r0, [sp, #4]
 8003100:	da06      	bge.n	8003110 <__kernel_sin+0x30>
 8003102:	ee10 0a10 	vmov	r0, s0
 8003106:	4629      	mov	r1, r5
 8003108:	f7fd fcb4 	bl	8000a74 <__aeabi_d2iz>
 800310c:	2800      	cmp	r0, #0
 800310e:	d051      	beq.n	80031b4 <__kernel_sin+0xd4>
 8003110:	4622      	mov	r2, r4
 8003112:	462b      	mov	r3, r5
 8003114:	4620      	mov	r0, r4
 8003116:	4629      	mov	r1, r5
 8003118:	f7fd fa12 	bl	8000540 <__aeabi_dmul>
 800311c:	4682      	mov	sl, r0
 800311e:	468b      	mov	fp, r1
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4620      	mov	r0, r4
 8003126:	4629      	mov	r1, r5
 8003128:	f7fd fa0a 	bl	8000540 <__aeabi_dmul>
 800312c:	a341      	add	r3, pc, #260	; (adr r3, 8003234 <__kernel_sin+0x154>)
 800312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003132:	4680      	mov	r8, r0
 8003134:	4689      	mov	r9, r1
 8003136:	4650      	mov	r0, sl
 8003138:	4659      	mov	r1, fp
 800313a:	f7fd fa01 	bl	8000540 <__aeabi_dmul>
 800313e:	a33f      	add	r3, pc, #252	; (adr r3, 800323c <__kernel_sin+0x15c>)
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	f7fd f844 	bl	80001d0 <__aeabi_dsub>
 8003148:	4652      	mov	r2, sl
 800314a:	465b      	mov	r3, fp
 800314c:	f7fd f9f8 	bl	8000540 <__aeabi_dmul>
 8003150:	a33c      	add	r3, pc, #240	; (adr r3, 8003244 <__kernel_sin+0x164>)
 8003152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003156:	f7fd f83d 	bl	80001d4 <__adddf3>
 800315a:	4652      	mov	r2, sl
 800315c:	465b      	mov	r3, fp
 800315e:	f7fd f9ef 	bl	8000540 <__aeabi_dmul>
 8003162:	a33a      	add	r3, pc, #232	; (adr r3, 800324c <__kernel_sin+0x16c>)
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	f7fd f832 	bl	80001d0 <__aeabi_dsub>
 800316c:	4652      	mov	r2, sl
 800316e:	465b      	mov	r3, fp
 8003170:	f7fd f9e6 	bl	8000540 <__aeabi_dmul>
 8003174:	a337      	add	r3, pc, #220	; (adr r3, 8003254 <__kernel_sin+0x174>)
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f7fd f82b 	bl	80001d4 <__adddf3>
 800317e:	9b01      	ldr	r3, [sp, #4]
 8003180:	4606      	mov	r6, r0
 8003182:	460f      	mov	r7, r1
 8003184:	b9eb      	cbnz	r3, 80031c2 <__kernel_sin+0xe2>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	4650      	mov	r0, sl
 800318c:	4659      	mov	r1, fp
 800318e:	f7fd f9d7 	bl	8000540 <__aeabi_dmul>
 8003192:	a325      	add	r3, pc, #148	; (adr r3, 8003228 <__kernel_sin+0x148>)
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	f7fd f81a 	bl	80001d0 <__aeabi_dsub>
 800319c:	4642      	mov	r2, r8
 800319e:	464b      	mov	r3, r9
 80031a0:	f7fd f9ce 	bl	8000540 <__aeabi_dmul>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4620      	mov	r0, r4
 80031aa:	4629      	mov	r1, r5
 80031ac:	f7fd f812 	bl	80001d4 <__adddf3>
 80031b0:	4604      	mov	r4, r0
 80031b2:	460d      	mov	r5, r1
 80031b4:	ec45 4b10 	vmov	d0, r4, r5
 80031b8:	b003      	add	sp, #12
 80031ba:	ecbd 8b04 	vpop	{d8-d9}
 80031be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031c2:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <__kernel_sin+0x150>)
 80031c4:	ec51 0b18 	vmov	r0, r1, d8
 80031c8:	2200      	movs	r2, #0
 80031ca:	f7fd f9b9 	bl	8000540 <__aeabi_dmul>
 80031ce:	4632      	mov	r2, r6
 80031d0:	ec41 0b19 	vmov	d9, r0, r1
 80031d4:	463b      	mov	r3, r7
 80031d6:	4640      	mov	r0, r8
 80031d8:	4649      	mov	r1, r9
 80031da:	f7fd f9b1 	bl	8000540 <__aeabi_dmul>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	ec51 0b19 	vmov	r0, r1, d9
 80031e6:	f7fc fff3 	bl	80001d0 <__aeabi_dsub>
 80031ea:	4652      	mov	r2, sl
 80031ec:	465b      	mov	r3, fp
 80031ee:	f7fd f9a7 	bl	8000540 <__aeabi_dmul>
 80031f2:	ec53 2b18 	vmov	r2, r3, d8
 80031f6:	f7fc ffeb 	bl	80001d0 <__aeabi_dsub>
 80031fa:	a30b      	add	r3, pc, #44	; (adr r3, 8003228 <__kernel_sin+0x148>)
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	4606      	mov	r6, r0
 8003202:	460f      	mov	r7, r1
 8003204:	4640      	mov	r0, r8
 8003206:	4649      	mov	r1, r9
 8003208:	f7fd f99a 	bl	8000540 <__aeabi_dmul>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4630      	mov	r0, r6
 8003212:	4639      	mov	r1, r7
 8003214:	f7fc ffde 	bl	80001d4 <__adddf3>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4620      	mov	r0, r4
 800321e:	4629      	mov	r1, r5
 8003220:	f7fc ffd6 	bl	80001d0 <__aeabi_dsub>
 8003224:	e7c4      	b.n	80031b0 <__kernel_sin+0xd0>
 8003226:	bf00      	nop
 8003228:	55555549 	.word	0x55555549
 800322c:	3fc55555 	.word	0x3fc55555
 8003230:	3fe00000 	.word	0x3fe00000
 8003234:	5acfd57c 	.word	0x5acfd57c
 8003238:	3de5d93a 	.word	0x3de5d93a
 800323c:	8a2b9ceb 	.word	0x8a2b9ceb
 8003240:	3e5ae5e6 	.word	0x3e5ae5e6
 8003244:	57b1fe7d 	.word	0x57b1fe7d
 8003248:	3ec71de3 	.word	0x3ec71de3
 800324c:	19c161d5 	.word	0x19c161d5
 8003250:	3f2a01a0 	.word	0x3f2a01a0
 8003254:	1110f8a6 	.word	0x1110f8a6
 8003258:	3f811111 	.word	0x3f811111

0800325c <fabs>:
 800325c:	ec51 0b10 	vmov	r0, r1, d0
 8003260:	ee10 2a10 	vmov	r2, s0
 8003264:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003268:	ec43 2b10 	vmov	d0, r2, r3
 800326c:	4770      	bx	lr
	...

08003270 <floor>:
 8003270:	ec51 0b10 	vmov	r0, r1, d0
 8003274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003278:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800327c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8003280:	2e13      	cmp	r6, #19
 8003282:	ee10 5a10 	vmov	r5, s0
 8003286:	ee10 8a10 	vmov	r8, s0
 800328a:	460c      	mov	r4, r1
 800328c:	dc32      	bgt.n	80032f4 <floor+0x84>
 800328e:	2e00      	cmp	r6, #0
 8003290:	da14      	bge.n	80032bc <floor+0x4c>
 8003292:	a333      	add	r3, pc, #204	; (adr r3, 8003360 <floor+0xf0>)
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	f7fc ff9c 	bl	80001d4 <__adddf3>
 800329c:	2200      	movs	r2, #0
 800329e:	2300      	movs	r3, #0
 80032a0:	f7fd fbde 	bl	8000a60 <__aeabi_dcmpgt>
 80032a4:	b138      	cbz	r0, 80032b6 <floor+0x46>
 80032a6:	2c00      	cmp	r4, #0
 80032a8:	da57      	bge.n	800335a <floor+0xea>
 80032aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80032ae:	431d      	orrs	r5, r3
 80032b0:	d001      	beq.n	80032b6 <floor+0x46>
 80032b2:	4c2d      	ldr	r4, [pc, #180]	; (8003368 <floor+0xf8>)
 80032b4:	2500      	movs	r5, #0
 80032b6:	4621      	mov	r1, r4
 80032b8:	4628      	mov	r0, r5
 80032ba:	e025      	b.n	8003308 <floor+0x98>
 80032bc:	4f2b      	ldr	r7, [pc, #172]	; (800336c <floor+0xfc>)
 80032be:	4137      	asrs	r7, r6
 80032c0:	ea01 0307 	and.w	r3, r1, r7
 80032c4:	4303      	orrs	r3, r0
 80032c6:	d01f      	beq.n	8003308 <floor+0x98>
 80032c8:	a325      	add	r3, pc, #148	; (adr r3, 8003360 <floor+0xf0>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f7fc ff81 	bl	80001d4 <__adddf3>
 80032d2:	2200      	movs	r2, #0
 80032d4:	2300      	movs	r3, #0
 80032d6:	f7fd fbc3 	bl	8000a60 <__aeabi_dcmpgt>
 80032da:	2800      	cmp	r0, #0
 80032dc:	d0eb      	beq.n	80032b6 <floor+0x46>
 80032de:	2c00      	cmp	r4, #0
 80032e0:	bfbe      	ittt	lt
 80032e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80032e6:	fa43 f606 	asrlt.w	r6, r3, r6
 80032ea:	19a4      	addlt	r4, r4, r6
 80032ec:	ea24 0407 	bic.w	r4, r4, r7
 80032f0:	2500      	movs	r5, #0
 80032f2:	e7e0      	b.n	80032b6 <floor+0x46>
 80032f4:	2e33      	cmp	r6, #51	; 0x33
 80032f6:	dd0b      	ble.n	8003310 <floor+0xa0>
 80032f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80032fc:	d104      	bne.n	8003308 <floor+0x98>
 80032fe:	ee10 2a10 	vmov	r2, s0
 8003302:	460b      	mov	r3, r1
 8003304:	f7fc ff66 	bl	80001d4 <__adddf3>
 8003308:	ec41 0b10 	vmov	d0, r0, r1
 800330c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003310:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8003314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003318:	fa23 f707 	lsr.w	r7, r3, r7
 800331c:	4207      	tst	r7, r0
 800331e:	d0f3      	beq.n	8003308 <floor+0x98>
 8003320:	a30f      	add	r3, pc, #60	; (adr r3, 8003360 <floor+0xf0>)
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f7fc ff55 	bl	80001d4 <__adddf3>
 800332a:	2200      	movs	r2, #0
 800332c:	2300      	movs	r3, #0
 800332e:	f7fd fb97 	bl	8000a60 <__aeabi_dcmpgt>
 8003332:	2800      	cmp	r0, #0
 8003334:	d0bf      	beq.n	80032b6 <floor+0x46>
 8003336:	2c00      	cmp	r4, #0
 8003338:	da02      	bge.n	8003340 <floor+0xd0>
 800333a:	2e14      	cmp	r6, #20
 800333c:	d103      	bne.n	8003346 <floor+0xd6>
 800333e:	3401      	adds	r4, #1
 8003340:	ea25 0507 	bic.w	r5, r5, r7
 8003344:	e7b7      	b.n	80032b6 <floor+0x46>
 8003346:	2301      	movs	r3, #1
 8003348:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800334c:	fa03 f606 	lsl.w	r6, r3, r6
 8003350:	4435      	add	r5, r6
 8003352:	4545      	cmp	r5, r8
 8003354:	bf38      	it	cc
 8003356:	18e4      	addcc	r4, r4, r3
 8003358:	e7f2      	b.n	8003340 <floor+0xd0>
 800335a:	2500      	movs	r5, #0
 800335c:	462c      	mov	r4, r5
 800335e:	e7aa      	b.n	80032b6 <floor+0x46>
 8003360:	8800759c 	.word	0x8800759c
 8003364:	7e37e43c 	.word	0x7e37e43c
 8003368:	bff00000 	.word	0xbff00000
 800336c:	000fffff 	.word	0x000fffff

08003370 <scalbn>:
 8003370:	b570      	push	{r4, r5, r6, lr}
 8003372:	ec55 4b10 	vmov	r4, r5, d0
 8003376:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800337a:	4606      	mov	r6, r0
 800337c:	462b      	mov	r3, r5
 800337e:	b99a      	cbnz	r2, 80033a8 <scalbn+0x38>
 8003380:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003384:	4323      	orrs	r3, r4
 8003386:	d036      	beq.n	80033f6 <scalbn+0x86>
 8003388:	4b39      	ldr	r3, [pc, #228]	; (8003470 <scalbn+0x100>)
 800338a:	4629      	mov	r1, r5
 800338c:	ee10 0a10 	vmov	r0, s0
 8003390:	2200      	movs	r2, #0
 8003392:	f7fd f8d5 	bl	8000540 <__aeabi_dmul>
 8003396:	4b37      	ldr	r3, [pc, #220]	; (8003474 <scalbn+0x104>)
 8003398:	429e      	cmp	r6, r3
 800339a:	4604      	mov	r4, r0
 800339c:	460d      	mov	r5, r1
 800339e:	da10      	bge.n	80033c2 <scalbn+0x52>
 80033a0:	a32b      	add	r3, pc, #172	; (adr r3, 8003450 <scalbn+0xe0>)
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	e03a      	b.n	800341e <scalbn+0xae>
 80033a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80033ac:	428a      	cmp	r2, r1
 80033ae:	d10c      	bne.n	80033ca <scalbn+0x5a>
 80033b0:	ee10 2a10 	vmov	r2, s0
 80033b4:	4620      	mov	r0, r4
 80033b6:	4629      	mov	r1, r5
 80033b8:	f7fc ff0c 	bl	80001d4 <__adddf3>
 80033bc:	4604      	mov	r4, r0
 80033be:	460d      	mov	r5, r1
 80033c0:	e019      	b.n	80033f6 <scalbn+0x86>
 80033c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80033c6:	460b      	mov	r3, r1
 80033c8:	3a36      	subs	r2, #54	; 0x36
 80033ca:	4432      	add	r2, r6
 80033cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80033d0:	428a      	cmp	r2, r1
 80033d2:	dd08      	ble.n	80033e6 <scalbn+0x76>
 80033d4:	2d00      	cmp	r5, #0
 80033d6:	a120      	add	r1, pc, #128	; (adr r1, 8003458 <scalbn+0xe8>)
 80033d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033dc:	da1c      	bge.n	8003418 <scalbn+0xa8>
 80033de:	a120      	add	r1, pc, #128	; (adr r1, 8003460 <scalbn+0xf0>)
 80033e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033e4:	e018      	b.n	8003418 <scalbn+0xa8>
 80033e6:	2a00      	cmp	r2, #0
 80033e8:	dd08      	ble.n	80033fc <scalbn+0x8c>
 80033ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80033ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80033f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80033f6:	ec45 4b10 	vmov	d0, r4, r5
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
 80033fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003400:	da19      	bge.n	8003436 <scalbn+0xc6>
 8003402:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003406:	429e      	cmp	r6, r3
 8003408:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800340c:	dd0a      	ble.n	8003424 <scalbn+0xb4>
 800340e:	a112      	add	r1, pc, #72	; (adr r1, 8003458 <scalbn+0xe8>)
 8003410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1e2      	bne.n	80033de <scalbn+0x6e>
 8003418:	a30f      	add	r3, pc, #60	; (adr r3, 8003458 <scalbn+0xe8>)
 800341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341e:	f7fd f88f 	bl	8000540 <__aeabi_dmul>
 8003422:	e7cb      	b.n	80033bc <scalbn+0x4c>
 8003424:	a10a      	add	r1, pc, #40	; (adr r1, 8003450 <scalbn+0xe0>)
 8003426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0b8      	beq.n	80033a0 <scalbn+0x30>
 800342e:	a10e      	add	r1, pc, #56	; (adr r1, 8003468 <scalbn+0xf8>)
 8003430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003434:	e7b4      	b.n	80033a0 <scalbn+0x30>
 8003436:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800343a:	3236      	adds	r2, #54	; 0x36
 800343c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003440:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8003444:	4620      	mov	r0, r4
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <scalbn+0x108>)
 8003448:	2200      	movs	r2, #0
 800344a:	e7e8      	b.n	800341e <scalbn+0xae>
 800344c:	f3af 8000 	nop.w
 8003450:	c2f8f359 	.word	0xc2f8f359
 8003454:	01a56e1f 	.word	0x01a56e1f
 8003458:	8800759c 	.word	0x8800759c
 800345c:	7e37e43c 	.word	0x7e37e43c
 8003460:	8800759c 	.word	0x8800759c
 8003464:	fe37e43c 	.word	0xfe37e43c
 8003468:	c2f8f359 	.word	0xc2f8f359
 800346c:	81a56e1f 	.word	0x81a56e1f
 8003470:	43500000 	.word	0x43500000
 8003474:	ffff3cb0 	.word	0xffff3cb0
 8003478:	3c900000 	.word	0x3c900000

0800347c <_init>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	bf00      	nop
 8003480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003482:	bc08      	pop	{r3}
 8003484:	469e      	mov	lr, r3
 8003486:	4770      	bx	lr

08003488 <_fini>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	bf00      	nop
 800348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348e:	bc08      	pop	{r3}
 8003490:	469e      	mov	lr, r3
 8003492:	4770      	bx	lr
